Перем ТекСтрокаВкладок;
Перем ВыбранныйТипСортировки;
Перем ЗакрытьФорму;
Перем Иконки;
Перем ПоискBluetoothУстройств;
Перем ЗагрузкаШрифтовВПринтер;
Перем ИконкиКалькулятор;
Перем ИконкиКнопок;
Перем ИконкиМенюФормы;
Перем НастройкиШрифтаДляПроверки;		//Массив хранит настройки шрифта для проверки необходимости записи
Перем ОбъектСообщениеПользователю;
Перем СписокЗакладокДляТаблицы;
Перем СписокВидовНастроек;
Перем СтруктураБыстрогоВыбора;
Перем СтруктураНастроек;
Перем ИмяКлючаНаличияИзменения;
Перем Параметры;
Перем ПарольЗапрошен;
Перем ДоступРазрешен;
Перем МассивШиринаЛенты;

Перем РежимРедактирования;
Перем ВидимостьПанелиКнопок;
Перем СписокСтрокИзменения;
Перем СписокОрганизаций;

Перем ОбъектВопрос;

////////////////////////////////////////////////////////////////////////////////////////////////
//									Общие функции											  //
////////////////////////////////////////////////////////////////////////////////////////////////

// Функция задает доступность элементов формы настройки печати в зависимости от 
// настройки использовать печать
Функция ИзменитьДоступностьЭлементовПечати()
	
	ИспользоватьПечать = ЭтаФорма.ИспользоватьПечать.Отмечен;
	ЭтаФорма.ВариантыПечати.Выключен = Не ИспользоватьПечать;
	ЭтаФорма.ТипПринтера.Выключен 	 = Не ИспользоватьПечать;
	ЭтаФорма.ТипСоединения.Выключен  = Не ИспользоватьПечать;
	ЭтаФорма.ИмяУстройства.Выключен  = Не ИспользоватьПечать;
	ЭтаФорма.ПортПринтера.Выключен 	 = Не ИспользоватьПечать;
	ЭтаФорма.АдресПринтера.Выключен  = Не ИспользоватьПечать;
	ЭтаФорма.КнопкаОбновить.Выключен = Не ИспользоватьПечать;
	ЭтаФорма.Кодировка.Выключен		 = Не ИспользоватьПечать;
	ЭтаФорма.ПлотностьШрифта.Выключен = Не ИспользоватьПечать;
	ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Выключен = Не ИспользоватьПечать;
	
	Возврат 0;
КонецФункции

Процедура ИзменитьДоступностьЭлементовККТ()

	ИспользоватьККТ = ЭтаФорма.ИспользоватьККТ.Отмечен;
	
	ЭтаФорма.ККТУпрощенныйРежимРаботы.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТАвтоподключение.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТИспользоватьРасчетыККТ.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТСписокОрганизаций.Выключен = Глоб.глТекПеременныеКонстант.ЗапретитьИзменятьОрганизациюККТ Или Не ИспользоватьККТ;
	ЭтаФорма.ККТИспользоватьРасчетыККТ.Выключен = Глоб.глТекПеременныеКонстант.ЗапретитьИзменятьРасчетыККТ Или Не ИспользоватьККТ;
	ЭтаФорма.ККТСписокМоделей.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТТипСоединения.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТСписокШиринаЛенты.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТУстановитьШирину.Выключен = Не ИспользоватьККТ Или Не Глоб.ККТПодключено;
	ЭтаФорма.ККТИмяУстройства.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТКнопкаОбновить.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТАдресККМ.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТПортККМ.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТПарольПользователя.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТПарольАдминистратора.Выключен = Не ИспользоватьККТ;
	ЭтаФорма.ККТСоединение.Выключен = Не ИспользоватьККТ;
	УстановитьНеактивностьКнопокККТ(Не ИспользоватьККТ);
	Если (ЭтаФорма.ККТСоединение.Выключен = Ложь) И (ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTConnect) Тогда
		УстановитьНеактивностьКнопокККТ(Истина);
	КонецЕсли;

КонецПроцедуры

Функция СписокТемПриложения_ПриИзмененииВыбора()

	Если ЭтаФорма.СписокТемПриложения.ПолучитьТекущийВыбор() <> Глоб.глТекПеременныеКонстант.ТемаПриложения Тогда
		Глоб.ВывестиВсплывающееСообщение(Слов DictUserMessageNeedRestart);
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция ВернутьРазмерыКонтрола(Контрол, Ширина)

	ТекстКонтрола = СокрЛП(ЭтаФорма[Контрол].Текст);
	ШрифтКонтрола = ЭтаФорма[Контрол].Шрифт;

	Возврат ПолучитьРазмерТекста(ТекстКонтрола, ШрифтКонтрола, Ширина);
КонецФункции

//Функция формирует список колонок для списков документов
//
Функция ПолучитьСписокКолонокТаблицы()
	
	Перем СписокКолонок;
	
	ИндексКолонки = 0;
	
	// Колонка Флажок
	Колонка = Неопределено;
	Колонка.Имя = "Пометка";
	Колонка.Представление = "";
	Колонка.Формат = Неопределено;
	Колонка.Тип	   = "Картинка";
	Колонка.Видимость = Ложь;
	Колонка.Положение = 1;
	СписокКолонок[ИндексКолонки] = Колонка;
	ИндексКолонки = ИндексКолонки + 1;
	
	// Колонка Картинка
	Колонка = Неопределено;
	Колонка.Имя = "Наименование";
	Колонка.Представление = Слов DictCatalogsDialogFormsName;
	Колонка.Данные = "Наименование";
	Колонка.Формат = Неопределено;
	Колонка.Тип	   = "Ссылка";
	Колонка.Положение = 0;
	СписокКолонок[ИндексКолонки] = Колонка;
	ИндексКолонки = ИндексКолонки + 1;
	
	// Колонка Картинка
	Колонка = Неопределено;
	Колонка.Имя = "СпособОбмена";
	Колонка.Представление = Слов DictConstantsMetodOfExchange;
	Колонка.Данные = "СпособОбмена";
	Колонка.Формат = Неопределено;
	Колонка.Тип	   = "Ссылка";
	Колонка.Положение = 0;
	СписокКолонок[ИндексКолонки] = Колонка;
	ИндексКолонки = ИндексКолонки + 1;
	
	Возврат СписокКолонок;
КонецФункции

// Функция задает доступность элементов формы настройки сканирования в зависимости от 
// настройки использовать сканирование
Функция ИзменитьДоступностьЭлементовСканирования()
	
	ИспользоватьСканирование = ЭтаФорма.ИспользоватьСканирование.Отмечен;
	ЭтаФорма.ПрефиксВесовогоТовара.Выключен = Не ИспользоватьСканирование;
	ЭтаФорма.ИмяСканера.Выключен 			= Не ИспользоватьСканирование;
	ЭтаФорма.КнопкаОбновитьСканеры.Выключен = Не ИспользоватьСканирование;
	
	Возврат 0;
КонецФункции

Функция ИзменитьТипСортировки()

	ВыбранныйТипСортировки = СтруктураБыстрогоВыбора["ТипыСортировки"][ЭтаФорма.ТипыСортировок.ПолучитьТекущийВыбор()];

	Возврат 0;
КонецФункции

Процедура ПоказыватьРабочийСтол_ПриНажатии()

	Глоб.ВывестиВсплывающееСообщение(Слов DictUserMessageNeedRestart);

КонецПроцедуры

Функция ЗаписатьНастройкиТрекинга()
	
	Константы.ИспользоватьGPS.Установить(ЭтаФорма.ИспользоватьGPS.Отмечен);
	Константы.ЗаписьТрека.Установить(ЭтаФорма.ЗаписьТрека.Отмечен);
	Константы.ПериодЗаписиТрека.Установить(Целое(ЭтаФорма.ПериодЗаписиТрека.Текст));
	Константы.ЗаписыватьСкорость.Установить(ЭтаФорма.ЗаписыватьСкорость.Отмечен);
	Константы.ИспользоватьДатуГПС.Установить(ЭтаФорма.ИспользоватьДатуGPS.Отмечен);
	Константы.РабочееВремя.Установить(ЭтаФорма.ВремяНачала.Текст + "-" + ЭтаФорма.ВремяОкончания.Текст);
	СтрокаДней = "";
	ИндМассива = 1;
	Пока ИндМассива < 8 Цикл
		Если ЭтаФорма["Фл" + Строка(ИндМассива)].Отмечен Тогда
			СтрокаДней = СтрокаДней + ?(СтрокаДней = "", "", ",") + Строка(ИндМассива);
		КонецЕсли;
		ИндМассива = ИндМассива + 1;
	КонецЦикла;
	Константы.РабочиеДни.Установить(СтрокаДней);
	
	//Константы фоновой передачи
	Константы.ФоноваяПередача.Установить(ЭтаФорма.ФлФоноваяПередача.Отмечен);
	Константы.ИнтервалПередачи.Установить(Целое(ЭтаФорма.ИнтервалПередачи.Текст));
	
	Возврат 0;
КонецФункции

Процедура ЗаписатьНастройкиККТ()

	Константы.ИспользоватьККТ.Установить(ЭтаФорма.ИспользоватьККТ.Отмечен);
	Глоб.глТекПеременныеКонстант.ИспользоватьККТ = ЭтаФорма.ИспользоватьККТ.Отмечен;
	Константы.УпрощенныйРежимРаботыККТ.Установить(ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен);
	Глоб.глТекПеременныеКонстант.УпрощенныйРежимРаботыККТ = ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен;
	Константы.АвтоподключениеПриСтартеПриложения.Установить(ЭтаФорма.ККТАвтоподключение.Отмечен);
	Глоб.глТекПеременныеКонстант.АвтоподключениеПриСтарте = ЭтаФорма.ККТАвтоподключение.Отмечен;
	Константы.ИспользоватьРасчетыККТ.Установить(ЭтаФорма.ККТИспользоватьРасчетыККТ.Отмечен);
	Глоб.глТекПеременныеКонстант.ИспользоватьРасчетыККТ = ЭтаФорма.ККТИспользоватьРасчетыККТ.Отмечен;
	Константы.АдресККТ.Установить(ЭтаФорма.ККТАдресККМ.Текст);
	Константы.ПортККТ.Установить(ЭтаФорма.ККТПортККМ.Текст);
	Константы.ПарольПользователяККТ.Установить(Этаформа.ККТПарольПользователя.Текст);
	Константы.ПарольАдминистратораККТ.Установить(ЭтаФорма.ККТПарольАдминистратора.Текст);

	ТипСоединения = ЭтаФорма.ККТТипСоединения.ПолучитьТекущийВыбор();
	Константы.ТипСоединенияККТ.Установить(ТипСоединения);

	МодельККТ = ЭтаФорма.ККТСписокМоделей.ПолучитьТекущийВыбор();
	Константы.МодельККТ.Установить(МодельККТ);
	
	Если ЭтаФорма.ИспользоватьККТ.Отмечен Тогда
	НомерЭлемента = ЭтаФорма.ККТИмяУстройства.ПолучитьТекущийВыбор();
	Если НомерЭлемента <> -1 Тогда
		ИмяУстройства = ЭтаФорма.ККТИмяУстройства.ПолучитьТекстЭлемента(НомерЭлемента);
		Константы.ИмяУстройстваККТ.Установить(ИмяУстройства);
	КонецЕсли;
	КонецЕсли;
	ККТСписокОрганизаций_ПриИзмененииВыбора();

КонецПроцедуры

// Функция записывает настройки для печати документов
//
Функция ЗаписатьНастройкиПечати()

	Глоб.глТекПеременныеКонстант.ИспользоватьПечать = ЭтаФорма.ИспользоватьПечать.Отмечен;
	Константы.ИспользоватьПечать.Установить(ЭтаФорма.ИспользоватьПечать.Отмечен);
	
	Глоб.глТекПеременныеКонстант.ПечатьЧерезТекстовыйДокумент = ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Отмечен;
	Константы.ПечатьЧерезТекстовыйДокумент.Установить(ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Отмечен);

	ПлотностьШрифта = Целое(ЭтаФорма.ПлотностьШрифта.Текст);
	Глоб.глТекПеременныеКонстант.ПлотностьШрифта = ПлотностьШрифта;
	Константы.ПлотностьШрифта.Установить(ПлотностьШрифта);
	
	ТипСоединения = ЭтаФорма.ТипСоединения.ПолучитьТекущийВыбор() + 1;
	Константы.ТипСоединения.Установить(ТипСоединения);
	
	ТипПринтера   = ЭтаФорма.ТипПринтера.ПолучитьТекущийВыбор();
	Константы.ТипПринтера.Установить(СтруктураБыстрогоВыбора["ТипыПринтеров"][ТипПринтера].Представление());

	Кодировка	  = ЭтаФорма.Кодировка.ПолучитьТекущийВыбор();
	Константы.Кодировка.Установить(СтруктураБыстрогоВыбора["Кодировки"][Кодировка]);
	
	Плотность	  = ЭтаФорма.ПлотностьDPI.ПолучитьТекущийВыбор();
	Глоб.глТекПеременныеКонстант.ПлотностьПечати = СтруктураБыстрогоВыбора["Плотности"][Плотность];
	Константы.ПлотностьПечати.Установить(СтруктураБыстрогоВыбора["Плотности"][Плотность]);
	
	ВариантПечати = ЭтаФорма.ВариантыПечати.ПолучитьТекущийВыбор();
	Глоб.глТекПеременныеКонстант.ВариантПечати = ВариантПечати;
	Константы.ВариантПечати.Установить(ВариантПечати);
	
	Глоб.глТекПеременныеКонстант.ПечатьЧерезВнешнееПриложение = ВариантПечати;
	Константы.ПечатьЧерезВнешнееПриложение.Установить(ВариантПечати);
	
	Глоб.глТекПеременныеКонстант.ПечататьКакИзображение = ЭтаФорма.ПечататьКакИзображение.Отмечен;
	Константы.ПечататьКакИзображение.Установить(ЭтаФорма.ПечататьКакИзображение.Отмечен);
	
	Константы.АдресПринтера.Установить(ЭтаФорма.АдресПринтера.Текст);
	Константы.ПортПринтера.Установить(ЭтаФорма.ПортПринтера.Текст);
	НомерЭлемента = ЭтаФорма.ИмяУстройства.ПолучитьТекущийВыбор();
	Если НомерЭлемента <> -1 Тогда
		ИмяУстройства = ЭтаФорма.ИмяУстройства.ПолучитьТекстЭлемента(НомерЭлемента);
		Константы.ИмяУстройства.Установить(ИмяУстройства);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция записывает настройки сканирования
//
Функция ЗаписатьНастройкиСканирования()
	
	Константы.ИспользоватьСканирование.Установить(ЭтаФорма.ИспользоватьСканирование.Отмечен);
	Если Не ЭтаФорма.ИспользоватьСканирование.Отмечен Тогда
		Возврат 0;
	КонецЕсли;
	
	Константы.ПрефиксВесовогоТовара.Установить(ЭтаФорма.ПрефиксВесовогоТовара.Текст);
	Глоб.глТекПеременныеКонстант.ПрефиксВесовогоТовара = ЭтаФорма.ПрефиксВесовогоТовара.Текст;
	
	НомерЭлемента = ЭтаФорма.ИмяСканера.ПолучитьТекущийВыбор();
	Если НомерЭлемента <> -1 Тогда
		ИмяУстройства = ЭтаФорма.ИмяСканера.ПолучитьТекстЭлемента(НомерЭлемента);
		ИмяСтарогоСканера = Константы.ИмяСканера.Получить();
	КонецЕсли;
	Если ИмяСтарогоСканера <> ИмяУстройства Тогда
		Если ИмяСтарогоСканера <> Слов DictCatalogsDialogFormsBuiltInCamera И ИмяСтарогоСканера <> Неопределено Тогда
			Если Глоб.СканерШК <> Неопределено Тогда
				Глоб.СканерШК.Подключить(Ложь);
				Глоб.СканерШК = Неопределено;
			КонецЕсли;
		Иначе
			Глоб.СканерШК = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Константы.ИмяСканера.Установить(ИмяУстройства);
	
	Возврат 0;
КонецФункции

// Функции изменения размера шрифта

Функция ИзменитьЗначениеПоля(ОбъектРазмера, ЗначениеИзменения)
	
	ЗначениеРазмера = Число(ОбъектРазмера.Текст) + ЗначениеИзменения;
	Если ЗначениеРазмера > 0 И ЗначениеРазмера < 21 Тогда
		ОбъектРазмера.Текст = Строка(Число(ОбъектРазмера.Текст) + ЗначениеИзменения);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтНадписи()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтНадписи()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтПоля()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтПоле.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтПоля()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтПоле.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтТаблицы()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтТаблица.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтТаблицы()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтТаблица.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтШапкиТаблицы()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтШапкаТаблица.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтШапкиТаблицы()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтШапкаТаблица.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтДиалога()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтДиалог.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтДиалога()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтДиалог.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтКнопки()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтКнопки()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()], -1);
	
	Возврат 0;
КонецФункции

Функция УвеличитьШрифтЗакладки()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтЗакладка.Представление()], 1);
	
	Возврат 0;
КонецФункции

Функция УменьшитьШрифтЗакладки()
	
	ИзменитьЗначениеПоля(ЭтаФорма["Размер" + Перечисления.СтилиШрифта.ШрифтЗакладка.Представление()], -1);
	
	Возврат 0;
КонецФункции

// Функции изменения размера шрифта

// ФункцияФормирует списокдоступных типов настроек шрифта
//
Функция ПолучитьСписокНастроекШрифта() Экспорт
	
	Перем СписокНастроек;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтНадпись.Представление();
	НастройкаШрифта.Представление = Слов DictConstSignaturesSizeDescr;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтНадписи);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтНадписи);
	СписокНастроек[0] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтПоле.Представление();
	НастройкаШрифта.Представление = Слов DictConstFieldsSizeDescr;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтПоля);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтПоля);
	СписокНастроек[1] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтТаблица.Представление();
	НастройкаШрифта.Представление = Слов DictConstTableRowsSizeDescr;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтТаблицы);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтТаблицы);
	СписокНастроек[2] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтШапкаТаблица.Представление();
	НастройкаШрифта.Представление = Слов DictConstTableRowsSizeDescr;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтШапкиТаблицы);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтШапкиТаблицы);
	СписокНастроек[3] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтДиалог.Представление();
	НастройкаШрифта.Представление = Слов DictConstDialogSizeDescr;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтДиалога);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтДиалога);
	СписокНастроек[4] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтКнопка.Представление();
	НастройкаШрифта.Представление = Слов DictConstDialogSizeButton;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтКнопки);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтКнопки);
	СписокНастроек[5] = НастройкаШрифта;
	
	НастройкаШрифта = Неопределено;
	НастройкаШрифта.Имя 		  = Перечисления.СтилиШрифта.ШрифтЗакладка.Представление();
	НастройкаШрифта.Представление = Слов DictConstDialogSizeTabs;
	НастройкаШрифта.ОбработчикМинуса = Глоб.ПолучитьФункциюМодуля(УменьшитьШрифтЗакладки);
	НастройкаШрифта.ОбработчикПлюса  = Глоб.ПолучитьФункциюМодуля(УвеличитьШрифтЗакладки);
	СписокНастроек[6] = НастройкаШрифта;
	
	Возврат СписокНастроек;
КонецФункции

Функция ПроверитьИЗаписатьНастройкиШрифта(СохранитьНастройки = Истина)
	
	СписокНастроекШрифта = Глоб.ПолучитьСписокНастроекШрифта();
	ИзменятьШрифт = Ложь;
	СтрокаНастроекШрифта = "";
	Для Каждого НастройкаШрифта Из СписокНастроекШрифта Цикл
		РазмерШрифта = Число(ЭтаФорма["Размер" + НастройкаШрифта.Имя].Текст);
		СтрокаНастроекШрифта = СтрокаНастроекШрифта + "Размер" + НастройкаШрифта.Имя + ":" + Строка(РазмерШрифта) + ";";
		Если НастройкиШрифтаДляПроверки["Размер" + НастройкаШрифта.Имя] <> РазмерШрифта Тогда
			ИзменятьШрифт = Истина;
		КонецЕсли;
		ИндексСтильШрифта = ЭтаФорма["Список" + НастройкаШрифта.Имя].ПолучитьТекущийВыбор();
		СтрокаНастроекШрифта = СтрокаНастроекШрифта + "Стиль" + НастройкаШрифта.Имя + ":" + Строка(ИндексСтильШрифта) + ";";
		Если НастройкиШрифтаДляПроверки["Стиль" + НастройкаШрифта.Имя] <> ИндексСтильШрифта Тогда
			ИзменятьШрифт = Истина;
		КонецЕсли;
		
		Если НастройкиШрифтаДляПроверки["Размер" + НастройкаШрифта.Имя] <> ЭтаФорма["Размер" + НастройкаШрифта.Имя].Текст 
				Или НастройкиШрифтаДляПроверки["Стиль" + НастройкаШрифта.Имя] <> ИндексСтильШрифта Тогда
			Если СохранитьНастройки Тогда
				Глоб.ОбновитьКонстантыИнтерфейса(НастройкаШрифта.Имя, Число(РазмерШрифта), ИндексСтильШрифта);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СохранитьНастройки Тогда
		СохранитьЗначение("НастройкиШрифта", СтрокаНастроекШрифта);
	КонецЕсли;
	
	Возврат ИзменятьШрифт;
КонецФункции

Функция ЕстьИзмененияНастроекЖурналаДокументов(ОтображаемыеВкладки = "")
	
	ЖурналИзменен 		= Ложь;
	
	Для Каждого ТекЗакладка Из СписокЗакладокДляТаблицы Цикл
		Если ТекЗакладка.Отображать Тогда
			ОтображаемыеВкладки = ОтображаемыеВкладки + ?(ОтображаемыеВкладки = "", "", ",") + ТекЗакладка.Имя;
		КонецЕсли;
	КонецЦикла;
	ВкладкиЖурналаКонстанта = Константы.ВидимостьВкладокЖурнала.Получить();
	
	Если ВкладкиЖурналаКонстанта <> ОтображаемыеВкладки Тогда
		ЖурналИзменен = Истина;
	КонецЕсли;
	
	Возврат ЖурналИзменен;
КонецФункции

Функция ЗаписатьКонстанты()
	Перем ОтображаемыеВкладки;

	ПерестроитьФормуЖурнала = Ложь;
	
	ОсновнойДокументПродажи = ЭтаФорма.СписокДокументовПродажи.ПолучитьТекущийВыбор();
	Глоб.глТекПеременныеКонстант.ОсновнойДокументПродажи  = ОсновнойДокументПродажи;
	Константы.ОсновнойДокументПродажи.Установить(ОсновнойДокументПродажи);
	
	ТемаПриложения = ЭтаФорма.СписокТемПриложения.ПолучитьТекущийВыбор();
	Глоб.глТекПеременныеКонстант.ТемаПриложения = ТемаПриложения;
	Константы.ТемаПриложения.Установить(ТемаПриложения);
	
	Константы.АвтозагрузкаНастроекИзЛичногоКабинета.Установить(ЭтаФорма.АвтозагрузкаНастроекИзЛК.Отмечен);
	Константы.ПоказыватьРабочийСтол.Установить(ЭтаФорма.ПоказыватьРабочийСтол.Отмечен);
	Константы.ОтображатьВесВЖурнале.Установить(ЭтаФорма.ОтражатьВес.Отмечен);
	Константы.ОтображатьКодНоменклатуры.Установить(ЭтаФорма.ОтображатьАртикулы.Отмечен);
	Константы.РежимВыбораЗакладок.Установить(ЭтаФорма.РежимВыбораЗакладок.ПолучитьТекущийВыбор() + 1);
	Константы.НаправлениеСортировки.Установить(ЭтаФорма.НаправлениеСортировки.ПолучитьТекущийВыбор());
	Константы.ИспользоватьКомментарииКФото.Установить(ЭтаФорма.ИспользоватьКомментарии.Отмечен);
	ТекущееРасположениеКнопокБара = Перечисления.ГоризонтальноеРасположение[ЭтаФорма.РасположениеКнопок.ПолучитьТекущийВыбор()];
	
	Если Константы.РасположениеКнопокПанели.Получить() <> ТекущееРасположениеКнопокБара
			Или Константы.ЗакрепитьПанельКнопок.Получить() <> ЭтаФорма.ФлЗакрепитьПанельКнопок.Отмечен Тогда
		Константы.РасположениеКнопокПанели.Установить(ТекущееРасположениеКнопокБара);
		Константы.ЗакрепитьПанельКнопок.Установить(ЭтаФорма.ФлЗакрепитьПанельКнопок.Отмечен);
		ПерестроитьФормуЖурнала = Истина;
	КонецЕсли;
	
	Если Константы.АльтернативныйРежимОтображенияКомментариев.Получить() <> ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.Отмечен Тогда
		Константы.АльтернативныйРежимОтображенияКомментариев.Установить(ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.Отмечен);
		Если Глоб.МодульКонтрагентов <> Неопределено Тогда
			Глоб.МодульКонтрагентов.УстановитьОтображениеКомментариев();
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроек.ОсновнаяОрганизация <> Неопределено Тогда
		Константы.ОсновнаяОрганизация.Установить(Строка(СтруктураНастроек.ОсновнаяОрганизация.ПолучитьИдентификатор()));
	КонецЕсли;

	Константы.ТипСортировкиЕдиницИзмерения.Установить(ВыбранныйТипСортировки);
	
	Если СписокВидовНастроек["НастройкиГПС"][ИмяКлючаНаличияИзменения] Тогда
		ЗаписатьНастройкиТрекинга();
	КонецЕсли;
	Если СписокВидовНастроек["НастройкиККТ"][ИмяКлючаНаличияИзменения] Тогда
		ЗаписатьНастройкиККТ();
	КонецЕсли;
	Если СписокВидовНастроек["НастройкиПечати"][ИмяКлючаНаличияИзменения] Тогда
		ЗаписатьНастройкиПечати();
	КонецЕсли;
	Если СписокВидовНастроек["НастройкиСканирования"][ИмяКлючаНаличияИзменения] Тогда
		ЗаписатьНастройкиСканирования();
	КонецЕсли;
	ИзменитьОтображениеЖурнала = ПроверитьИЗаписатьНастройкиШрифта();
	
	ОтображаемыеВкладки = "";
	Если ЕстьИзмененияНастроекЖурналаДокументов(ОтображаемыеВкладки) Тогда
		Константы.ВидимостьВкладокЖурнала.Установить(ОтображаемыеВкладки);
		ПерестроитьФормуЖурнала = Истина;
	КонецЕсли;
	
	Глоб.ЗагрузитьКонстантыДляРаботы();		
	Глоб.ЗагрузитьСохраняемыеКонстантыИнтерфейса();
	
    Если Глоб.глТекПеременныеКонстант.ПоказыватьРабочийСтол Тогда
   		Глоб.МодульГлавнойФормы.ОбновитьВсеМенюФормы();
   	КонецЕсли;
	
	Если Глоб.ЭтотМодульЗапущен(Глоб.МодульЖурнала.ИдентификаторМодуля) Тогда
		Глоб.МодульЖурнала.УстановитьВидимостьКонтроллов();
		Если ПерестроитьФормуЖурнала Тогда
			Глоб.ЗагрузитьОтображаемыеЗакладкиЖурнала();
			Глоб.МодульЖурнала.ОткрытьФормуЖурнала();
		Иначе
			Если ИзменитьОтображениеЖурнала Тогда
				Глоб.МодульЖурнала.ИзменитьПоложениеКонтролов();
				Глоб.МодульЖурнала.ОбновитьШрифты();
			КонецЕсли;
		КонецЕсли;
		Глоб.МодульЖурнала.ОбновитьВсеМенюФормы();
	КонецЕсли;
	
	Если ИзменитьОтображениеЖурнала И Глоб.МодульСообщений <> Неопределено Тогда
		Глоб.МодульСообщений.ИзменитьПоложениеКонтролов();
		Глоб.УстановитьРазмерШрифтаЭлементовФормы(Глоб.МодульСообщений.ЭтаФорма);
	КонецЕсли;
	
	возврат 0;
КонецФункции

//Функция ОбновитьОбменФоновый(МодульНастройкиОбмена, Результат)
//
//	если Результат тогда
//		ТекОбменФоновый = МодульНастройкиОбмена.ТекНастройкаОбъект;
//		ЭтаФорма.НастройкаФоновогоОбмена.Текст = ТекОбменФоновый.Наименование;
//	конецесли;
//	МодульНастройкиОбмена.ВыгрузитьМодуль();
//
//	возврат 0;
//конецфункции

Функция ОпределитьОрганизацию(МодульОрганизации, Результат)
	
	Если Результат Тогда
		СтруктураНастроек.ОсновнаяОрганизация = МодульОрганизации.ТекОрганизацияОбъект;
		ЭтаФорма.ОсновнаяОрганизация.Текст = СтруктураНастроек.ОсновнаяОрганизация.Наименование;
	КонецЕсли;
	
	МодульОрганизации.ВыгрузитьМодуль();
	
	Возврат 0;
КонецФункции

Функция ПроверитьКонстанты()
	
	КонстантыКорректны = Истина;
	КоличествоВкладокЖурнала = 0;

	Если ЭтаФорма.ЗаписьТрека.Отмечен Тогда
		Если Число(ЭтаФорма.ПериодЗаписиТрека.Текст) = 0 Или ЭтаФорма.ПериодЗаписиТрека.Текст = "" Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxEmptyParametr + Слов DictConstIntervalTrackRecord1);
			КонстантыКорректны = Ложь;
		КонецЕсли;
		ВремяНачала    = ЭтаФорма.ВремяНачала.Текст;
		ВремяОкончания = ЭтаФорма.ВремяОкончания.Текст;
		Если НайтиПодстроку(ВремяНачала, ":") = 0 Или НайтиПодстроку(ВремяОкончания, ":") = 0 Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxErrParametr);
			КонстантыКорректны = Ложь;
		КонецЕсли;
		Если Число(ПолучитьЛевуюПодстроку(ВремяНачала, 2)) < 0 Или Число(ПолучитьЛевуюПодстроку(ВремяОкончания, 2)) < 0 Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxErrParametr);
			КонстантыКорректны = Ложь;
		КонецЕсли;
		Если Число(ПолучитьЛевуюПодстроку(ВремяНачала, 2)) > 24 Или Число(ПолучитьЛевуюПодстроку(ВремяОкончания, 2)) > 24 Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxErrParametr);
			КонстантыКорректны = Ложь;
		КонецЕсли;
		Если Число(ПолучитьПравуюПодстроку(ВремяНачала, 2)) > 59 Или Число(ПолучитьПравуюПодстроку(ВремяОкончания, 2)) > 59 Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxErrParametr);
			КонстантыКорректны = Ложь;
		КонецЕсли;
		Если Число(ПолучитьПравуюПодстроку(ВремяНачала, 2)) < 0 Или Число(ПолучитьПравуюПодстроку(ВремяОкончания, 2)) < 0 Тогда
			Глоб.ВыполнитьСообщениеСистемы(Слов DictCatalogsMessageBoxErrParametr);
			КонстантыКорректны = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат КонстантыКорректны;
КонецФункции

// Функция обновляет список используемых вкладок
// после изменения
Функция ОбновитьДанныеСпискаВкладок()
	
	СписокДляЗакладок = СписокЗакладокДляТаблицы;
	СписокДляЗакладок.Количество = Глоб.ПолучитьКоличествоЭлементов(СписокЗакладокДляТаблицы);
	
	ЭтаФорма.ВидимыеВкладки.Данные = СписокДляЗакладок;
	
	Возврат 0;
КонецФункции

Функция ОбработатьОтветПользователяЗакрытия(Результат) Экспорт
	
	Если Результат = 1 Тогда
		ОповеститьОВыборе(Истина);
		ЗакрытьФорму = Истина;
		ЭтаФорма.ЗакрытьОК();
	ИначеЕсли Результат = 2 Тогда
		ОповеститьОВыборе(Истина);
		ЗакрытьФорму = Истина;
		ЭтаФорма.ЗакрытьОтмена();
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция ЗаполнитьСписокЗакладокЖурнала()

	Перем ЗакладкаЖурнала;
	Перем СписокЗакладок;
	
	ИспользоватьТорговлюСКолес = ?(Глоб.ИспользуетсяБазоваяВерсия, Ложь, Глоб.ОпределитьЗначениеЛогическойКонстанты("ТорговляСКолес"));
	
	ВидыДокументов = Перечисления.ВидыДокументов;
	
	Если Не Глоб.ИспользуетсяМерчендайзер Тогда
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Заказ.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocOrders;
		СписокЗакладок[ВидыДокументов.Заказ.Представление()] = ЗакладкаЖурнала;
	
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Долг.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocDolgs;
		СписокЗакладок[ВидыДокументов.Долг.Представление()] = ЗакладкаЖурнала;
	
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.ПКО.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDoCcashOrderTag;
		СписокЗакладок[ВидыДокументов.ПКО.Представление()] = ЗакладкаЖурнала;
	КонецЕсли;
	
	Если Глоб.Подсистемы["Мерчендайзинг"] Тогда
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Мерчендайзинг.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocMerch;
		СписокЗакладок[ВидыДокументов.Мерчендайзинг.Представление()] = ЗакладкаЖурнала;
	КонецЕсли;
	
	Если Не Глоб.ИспользуетсяБазоваяВерсия Тогда
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Посещение.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocVizit;
		СписокЗакладок[ВидыДокументов.Посещение.Представление()] = ЗакладкаЖурнала;
	КонецЕсли;
	
	Если Не Глоб.ИспользуетсяМерчендайзер Тогда
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Реализация.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocSale;
		СписокЗакладок[ВидыДокументов.Реализация.Представление()] = ЗакладкаЖурнала;
	
		Если ИспользоватьТорговлюСКолес Тогда
			ЗакладкаЖурнала = Неопределено;
			ЗакладкаЖурнала.Использована  = Ложь;
			ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Перемещение.Представление();
			ЗакладкаЖурнала.Представление = Слов DictDocMovementGoods;
			СписокЗакладок[ВидыДокументов.Перемещение.Представление()] = ЗакладкаЖурнала;
		КонецЕсли;
	
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Поступление.Представление();
		ЗакладкаЖурнала.Представление = ?(ИспользоватьТорговлюСКолес, Слов DictDocReceipt, Слов DictDocReturn);
		СписокЗакладок[ВидыДокументов.Поступление.Представление()] = ЗакладкаЖурнала;
	КонецЕсли;
	
	Если Не Глоб.ИспользуетсяБазоваяВерсия Тогда
		ЗакладкаЖурнала = Неопределено;
		ЗакладкаЖурнала.Использована  = Ложь;
		ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Задание.Представление();
		ЗакладкаЖурнала.Представление = Слов DictDocTask;
		СписокЗакладок[ВидыДокументов.Задание.Представление()] = ЗакладкаЖурнала;
	КонецЕсли;
	
	Если Не Глоб.ИспользуетсяМерчендайзер Тогда
		Если ИспользоватьТорговлюСКолес Тогда
			ЗакладкаЖурнала = Неопределено;
			ЗакладкаЖурнала.Использована  = Ложь;
			ЗакладкаЖурнала.Имя 		  = ВидыДокументов.Инвентаризация.Представление();
			ЗакладкаЖурнала.Представление = Слов DictDocInventory;
			СписокЗакладок[ВидыДокументов.Инвентаризация.Представление()] = ЗакладкаЖурнала;
		КонецЕсли;
	КонецЕсли;
	
	индекс = 0;
	
	Для Каждого ТекЗакладка Из Глоб.глТекПеременныеКонстант.ВидимостьВкладокЖурнала Цикл
		
		ЭлементСпискаЗакладок = СписокЗакладок[ТекЗакладка];
		Продолжить _Если ЭлементСпискаЗакладок = Неопределено;
		Продолжить _Если ЭлементСпискаЗакладок.Имя = Перечисления.ВидыДокументов.Мерчендайзинг.Представление()
			И Не Глоб.Подсистемы["Мерчендайзинг"];
		СписокЗакладок[ТекЗакладка].Использована = Истина;
		
		СтрокаТаблицыЗакладок = Неопределено;
		СтрокаТаблицыЗакладок.Отображать 	= Истина;
		СтрокаТаблицыЗакладок.Имя	   		= ЭлементСпискаЗакладок.Имя;
		СтрокаТаблицыЗакладок.Представление = "  " + ЭлементСпискаЗакладок.Представление;
		СписокЗакладокДляТаблицы[индекс] = СтрокаТаблицыЗакладок;
		индекс = индекс + 1;
		
	КонецЦикла;
	
	Для Каждого ЭлементСпискаЗакладок Из СписокЗакладок Цикл
		
		Если Не ЭлементСпискаЗакладок.Использована Тогда
			СтрокаТаблицыЗакладок = Неопределено;
			СтрокаТаблицыЗакладок.Отображать	= Ложь;
			СтрокаТаблицыЗакладок.Имя	   		= ЭлементСпискаЗакладок.Имя;
			СтрокаТаблицыЗакладок.Представление = "  " + ЭлементСпискаЗакладок.Представление;
			СписокЗакладокДляТаблицы[индекс] = СтрокаТаблицыЗакладок;
			индекс = индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДанныеСпискаВкладок();

	Возврат 0;
КонецФункции

Функция ЗаполнитьНастройкиГПС()
	
	СтруктураНастроекГПС = Неопределено;
	ПараметрыТрекинга    = Глоб.ОпределитьНастройкиТрекинга();
	ПериодЗаписиТрека    = ?(ПараметрыТрекинга.ПериодЗаписиТрека <> 0 И ПараметрыТрекинга.ПериодЗаписиТрека <> Неопределено, Строка(ПараметрыТрекинга.ПериодЗаписиТрека), "30");
	ВремяНачалаЗаписиТрека 	  = "09:00";
	ВремяОкончанияЗаписиТрека = "18:00";
	Если ПараметрыТрекинга.ВремяЗаписиТрекинга <> Неопределено И ПараметрыТрекинга.ВремяЗаписиТрекинга <> "" Тогда
		ВремяНачалаЗаписиТрека 	  = ПолучитьЛевуюПодстроку(ПараметрыТрекинга.ВремяЗаписиТрекинга, 5);
		ВремяОкончанияЗаписиТрека = ПолучитьПравуюПодстроку(ПараметрыТрекинга.ВремяЗаписиТрекинга, 5);
	КонецЕсли;
	ИнтервалПередачи = Константы.ИнтервалПередачи.Получить();
	ИнтервалПередачи = ?(ИнтервалПередачи = Неопределено, "300", Строка(ИнтервалПередачи)); 
	
	// Заполнение структуры для дальнейшего использования
	СтруктураНастроекГПС[ИмяКлючаНаличияИзменения] = Ложь;
	СтруктураНастроекГПС["ИспользоватьGPS"] 	= Глоб.глТекПеременныеКонстант.ИспользоватьGPS;
	СтруктураНастроекГПС["ЗаписыватьСкорость"] 	= ПараметрыТрекинга.ЗаписыватьСкорость;
	СтруктураНастроекГПС["ИспользоватьДатуGPS"] = ПараметрыТрекинга.ИспользоватьДатуГПС;
	СтруктураНастроекГПС["ЗаписьТрека"] 		= ПараметрыТрекинга.ЗаписьТрека;
	СтруктураНастроекГПС["ПериодЗаписиТрека"] 	= ПериодЗаписиТрека;
	СтруктураНастроекГПС["ВремяНачала"] 		= ВремяНачалаЗаписиТрека;
	СтруктураНастроекГПС["ВремяОкончания"] 		= ВремяОкончанияЗаписиТрека;
	СтруктураНастроекГПС["ИнтервалПередачи"] 	= ИнтервалПередачи;
	СтруктураНастроекГПС["ФлФоноваяПередача"]   = Константы.ФоноваяПередача.Получить();
	// Заполнение структуры для дальнейшего использования
	
	ЭтаФорма.ИспользоватьGPS.Отмечен 	 = Глоб.глТекПеременныеКонстант.ИспользоватьGPS;
	ЭтаФорма.ЗаписыватьСкорость.Отмечен  = ПараметрыТрекинга.ЗаписыватьСкорость;
	ЭтаФорма.ИспользоватьДатуGPS.Отмечен = ПараметрыТрекинга.ИспользоватьДатуГПС;
	ЭтаФорма.ЗаписьТрека.Отмечен 		 = ПараметрыТрекинга.ЗаписьТрека;
	ЭтаФорма.ПериодЗаписиТрека.Текст 	 = ПериодЗаписиТрека;
	ЭтаФорма.ВремяНачала.Текст 	  		 = ВремяНачалаЗаписиТрека;
	ЭтаФорма.ВремяОкончания.Текст 		 = ВремяОкончанияЗаписиТрека;
	ЭтаФорма.ИнтервалПередачи.Текст	   	 = ИнтервалПередачи;
	ЭтаФорма.ФлФоноваяПередача.Отмечен   = Константы.ФоноваяПередача.Получить();
	
	Если ПараметрыТрекинга.РабочиеДни <> Неопределено Тогда
		Для Каждого ТекДень Из ПараметрыТрекинга.РабочиеДни Цикл
			ЭтаФорма["Фл" + Строка(ТекДень)].Отмечен = Истина;
			СтруктураНастроекГПС["Фл" + Строка(ТекДень)] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	СписокВидовНастроек["НастройкиГПС"] = СтруктураНастроекГПС;
	
	Возврат 0;
КонецФункции

Процедура УстановитьНеактивностьКнопокККТ(Флаг)

	ЭтаФорма.ККТУстановитьШирину.Выключен = Флаг;
	ЭтаФорма.ККТСтатус.Выключен = Флаг;
	ЭтаФорма.ККТСигнал.Выключен = Флаг;
	ЭтаФорма.ККТСтатус.Картинка = ИконкиКнопок["Информация"+?(Флаг,"Неактивная","")];
	ЭтаФорма.ККТСигнал.Картинка = ИконкиКнопок["Сигнал"+?(Флаг,"Неактивная","")];

КонецПроцедуры

Процедура ЗаполнитьШиринуЛентККТ()

	ЭтаФорма.ККТСписокШиринаЛенты.Очистить();
	
	Возврат _Если Глоб.ОбъектККМ = Неопределено;

	Индекс = 0;
	МассивПоддерживаемыхЛент = Глоб.ОбъектККМ.ПолучитьСписокПоддерживаемыхЛент();
	Для Каждого Элемент Из МассивПоддерживаемыхЛент Цикл
		Если Элемент = 0 Тогда
			ПредставлениеЭлемента = Слов DictCatalogsDialogFormsByDef;
		Иначе
			ПредставлениеЭлемента = Строка(Элемент) + " mm";
		КонецЕсли;
		ЭтаФорма.ККТСписокШиринаЛенты.ДобавитьЭлемент(Индекс, ПредставлениеЭлемента);
		МассивШиринаЛенты[Индекс] = Элемент;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Попытка
		ЭтаФорма.ККТСписокШиринаЛенты.УстановитьВыбор(Глоб.глТекПеременныеКонстант.ШиринаЛентыККТ);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиККТ()

	СтруктураНастроекККТ = Неопределено;
	СтруктураНастроекККТ[ИмяКлючаНаличияИзменения] = Ложь;
	СтруктураНастроекККТ["ИспользоватьККТ"] = Глоб.глТекПеременныеКонстант.ИспользоватьККТ;
	СтруктураНастроекККТ["УпрощенныйРежимРаботыККТ"] = Глоб.глТекПеременныеКонстант.УпрощенныйРежимРаботыККТ;
	СтруктураНастроекККТ["АвтоподключениеККТ"] = Глоб.глТекПеременныеКонстант.АвтоподключениеПриСтарте;
	СтруктураНастроекККТ["ИспользоватьРасчетыККТ"] = Глоб.глТекПеременныеКонстант.ИспользоватьРасчетыККТ;
	СтруктураНастроекККТ["ОрганизацияККТ"] = Глоб.глТекПеременныеКонстант.ОрганизацияККТ;
	СтруктураНастроекККТ["МодельККТ"] = Глоб.глТекПеременныеКонстант.МодельККТ;
	СтруктураНастроекККТ["ТипСоединенияККТ"] = Глоб.глТекПеременныеКонстант.ТипСоединенияККТ;
	СтруктураНастроекККТ["ИмяУстройстваККТ"] = Глоб.глТекПеременныеКонстант.ИмяУстройстваККТ;
	СтруктураНастроекККТ["АдресККТ"] = Глоб.глТекПеременныеКонстант.АдресККТ;
	СтруктураНастроекККТ["ПортККТ"] = Глоб.глТекПеременныеКонстант.ПортККТ;
	СтруктураНастроекККТ["ПарольПользователяККТ"] = Глоб.глТекПеременныеКонстант.ПарольПользователяККТ;
	СтруктураНастроекККТ["ПарольАдминистратораККТ"] = Глоб.глТекПеременныеКонстант.ПарольАдминистратораККТ;
	
	ЭтаФорма.ИспользоватьККТ.Отмечен = СтруктураНастроекККТ["ИспользоватьККТ"];
	ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен = СтруктураНастроекККТ["УпрощенныйРежимРаботыККТ"];
	ЭтаФорма.ККТАвтоподключение.Отмечен = СтруктураНастроекККТ["АвтоподключениеККТ"];
	ЭтаФорма.ККТИспользоватьРасчетыККТ.Отмечен = СтруктураНастроекККТ["ИспользоватьРасчетыККТ"];
	ЭтаФорма.ККТТипСоединения.УстановитьВыбор(СтруктураНастроекККТ["ТипСоединенияККТ"]);
	ЭтаФорма.ККТАдресККМ.Текст = СтруктураНастроекККТ["АдресККТ"];
	ЭтаФорма.ККТПортККМ.Текст = СтруктураНастроекККТ["ПортККТ"];
	Если ПустаяСтрока(ЭтаФорма.ККТПортККМ.Текст) Тогда
		ЭтаФорма.ККТПортККМ.Текст = "5555";
	КонецЕсли;
	ЭтаФорма.ККТПарольПользователя.Текст	= СтруктураНастроекККТ["ПарольПользователяККТ"];
	ЭтаФорма.ККТПарольАдминистратора.Текст = СтруктураНастроекККТ["ПарольАдминистратораККТ"];
	
	СписокОрганизаций = Глоб.МодульРаботаСДокументами.СформироватьВыпадающийСписокПоСправочнику(ЭтаФорма.ККТСписокОрганизаций, "Организации", Неопределено, Истина, Истина);
	
	Если ПустаяСтрока(СтруктураНастроекККТ["ОрганизацияККТ"]) Тогда
		ЭтаФорма.ККТСписокОрганизаций.УстановитьВыбор(0);
	Иначе
		СпрОрганизации = Новый Справочники.Организации;
		ОрганизацияККТ = СпрОрганизации.ПолучитьЭлемент(Новый Гуид(СтруктураНастроекККТ["ОрганизацияККТ"]));
		Позиция = 0;
		Для Каждого ЭлементМассива, ЗначениеМассива Из СписокОрганизаций Цикл
			Если ЗначениеМассива = ОрганизацияККТ Тогда
				Позиция = ЭлементМассива;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЭтаФорма.ККТСписокОрганизаций.УстановитьВыбор(Позиция);
	КонецЕсли;

	МодельККТ = 0;
	Индекс = 0;
	Для Каждого Элемент Из СтруктураБыстрогоВыбора["МоделиККТ"] Цикл
		ПредставлениеЭлемента = Элемент.Представление();
		ЭтаФорма.ККТСписокМоделей.ДобавитьЭлемент(Индекс, ПредставлениеЭлемента);
		Если Индекс = СтруктураНастроекККТ["МодельККТ"] Тогда
			МодельККТ = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	ЭтаФорма.ККТСписокМоделей.УстановитьВыбор(МодельККТ);
	
	ЗаполнитьШиринуЛентККТ();
	
	СопряженныеУстройства = BluetoothМенеджер.ПолучитьСписокСопряженныхУстройств();
	Индекс = 0;
	
	ИндексТекущегоУстройства = 0;
	ЕстьТекущееУстройство = -1;
	Если СтруктураНастроекККТ["ИмяУстройстваККТ"] <> "" Тогда
		ЕстьТекущееУстройство = 0;
	КонецЕсли;
	
	Если СопряженныеУстройства <> Неопределено Тогда
		Для Каждого Элемент Из СопряженныеУстройства Цикл
			ЭтаФорма.ККТИмяУстройства.ДобавитьЭлемент(СопряженныеУстройства[Индекс]);
			Если ЕстьТекущееУстройство = 0 Тогда
				Если СокрЛП(СтруктураНастроекККТ["ИмяУстройстваККТ"]) = СокрЛП(СопряженныеУстройства[Индекс]) Тогда
					ЕстьТекущееУстройство = 1;
					ИндексТекущегоУстройства = Индекс;
				КонецЕсли;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьТекущееУстройство = 0 Тогда
		ЭтаФорма.ККТИмяУстройства.ДобавитьЭлемент(СтруктураНастроекККТ["ИмяУстройстваККТ"]);
		ИндексТекущегоУстройства = Индекс + 1;
	КонецЕсли;

	Если СтруктураНастроекККТ["ИмяУстройстваККТ"] <> "" Тогда
		ЭтаФорма.ККТИмяУстройства.УстановитьВыбор(ИндексТекущегоУстройства);
	Иначе
		ЭтаФорма.ККТИмяУстройства.Выключен = Истина;
		ЭтаФорма.ККТСоединение.Выключен = Истина;
		УстановитьНеактивностьКнопокККТ(Истина);
	КонецЕсли;

	Если СтруктураНастроекККТ["ИспользоватьККТ"] И Глоб.ККТПодключено Тогда
		ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTDisconnect;
		Глоб.ОбъектККМ.УстановитьОбработчикСостояния(ОбработчикСостоянияККТ);
	КонецЕсли;

	СписокВидовНастроек["НастройкиККТ"] = СтруктураНастроекККТ;

	Если Не Глоб.глТекПеременныеКонстант.ТорговляСКолес Тогда
		ЭтаФорма.ИспользоватьККТ.Отмечен = Ложь;
		ЭтаФорма.ИспользоватьККТ.Выключен = Истина;
		ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен = Ложь;
		ЭтаФорма.ККТАвтоподключение.Отмечен = Ложь;
		ЭтаФорма.ККТИспользоватьРасчетыККТ.Отмечен = Ложь;
	КонецЕсли;

	ИзменитьПоложениеКонтроловККТ();

КонецПроцедуры

// Функция заполняет настройки печати из констант
//
Функция ЗаполнитьНастройкиПечати()
	
	СтруктураНастройкиПечать = Неопределено;

	// Заполнение списка типов принтеров
	индекс      = 0;
	ТипПринтера = 0;
	Для Каждого Элемент Из СтруктураБыстрогоВыбора["ТипыПринтеров"] Цикл
		ПредставлениеЭлемента = Элемент.Представление();
		ЭтаФорма.ТипПринтера.ДобавитьЭлемент(ПредставлениеЭлемента);
		Если ПредставлениеЭлемента = Глоб.глТекПеременныеКонстант.ТипПринтера Тогда
			ТипПринтера = индекс;
		КонецЕсли;
		индекс = индекс + 1;
	КонецЦикла;
	
	// Заполнение списка кодировок
	индекс    = 0;
	Кодировка = 0;
	Для Каждого ТекКодировка Из СтруктураБыстрогоВыбора["Кодировки"] Цикл
		ЭтаФорма.Кодировка.ДобавитьЭлемент(ТекКодировка);
		Если ТекКодировка = Глоб.глТекПеременныеКонстант.Кодировка Тогда
			Кодировка = индекс;
		КонецЕсли;
		индекс = индекс + 1;
	КонецЦикла;
	
	// Заполнение вариантов печати
	ВариантПечати = 0;
	Для Каждого Индекс, ТекВариант Из СтруктураБыстрогоВыбора["Варианты"] Цикл
		ЭтаФорма.ВариантыПечати.ДобавитьЭлемент(ТекВариант);
		Если Индекс = Глоб.глТекПеременныеКонстант.ВариантПечати Тогда
			ВариантПечати = Индекс;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение плотности печати (dpi)
	ПлотностьПечати = 0;
	Для Каждого Индекс, Плотность Из СтруктураБыстрогоВыбора["Плотности"] Цикл
		ЭтаФорма.ПлотностьDPI.ДобавитьЭлемент(Строка(Плотность));
		Если Плотность = Глоб.глТекПеременныеКонстант.ПлотностьПечати Тогда
			ПлотностьПечати = Индекс;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение структуры для дальнейшего использования
	СтруктураНастройкиПечать[ИмяКлючаНаличияИзменения] = Ложь;
	СтруктураНастройкиПечать["ПлотностьШрифта"]    = Глоб.глТекПеременныеКонстант.ПлотностьШрифта;
	СтруктураНастройкиПечать["ИспользоватьПечать"] = Глоб.глТекПеременныеКонстант.ИспользоватьПечать;
	СтруктураНастройкиПечать["ВариантПечати"]	   = Глоб.глТекПеременныеКонстант.ВариантПечати;
	СтруктураНастройкиПечать["АдресПринтера"] 	   = Глоб.глТекПеременныеКонстант.АдресПринтера;
	СтруктураНастройкиПечать["ПортПринтера"] 	   = Строка(Глоб.глТекПеременныеКонстант.ПортПринтера);
	СтруктураНастройкиПечать["ТипПринтера"] 	   = ТипПринтера;
	СтруктураНастройкиПечать["Кодировка"] 		   = Кодировка;
	СтруктураНастройкиПечать["Плотность"]		   = ПлотностьПечати;
	СтруктураНастройкиПечать["ВариантПечати"]	   = ВариантПечати;
	СтруктураНастройкиПечать["ТипСоединения"] 	   = Глоб.глТекПеременныеКонстант.ТипСоединения-1;
	СтруктураНастройкиПечать["ИмяУстройства"] 	   = Глоб.глТекПеременныеКонстант.ИмяУстройства;
	СтруктураНастройкиПечать["ПлотностьПечати"]	   = Глоб.глТекПеременныеКонстант.ПлотностьПечати;
	СтруктураНастройкиПечать["ПечататьКакИзображение"] = Глоб.глТекПеременныеКонстант.ПечататьКакИзображение;
	СтруктураНастройкиПечать["ПечатьЧерезТекстовыйДокумент"] = Глоб.глТекПеременныеКонстант.ПечатьЧерезТекстовыйДокумент;
	
	// Заполнение структуры для дальнейшего использования
	ЭтаФорма.ПлотностьШрифта.Текст				  = Строка(СтруктураНастройкиПечать["ПлотностьШрифта"]);
	ЭтаФорма.ИспользоватьПечать.Отмечен 		  = СтруктураНастройкиПечать["ИспользоватьПечать"];
	ЭтаФорма.ВариантыПечати.УстановитьВыбор(СтруктураНастройкиПечать["ВариантПечати"]);
	ЭтаФорма.АдресПринтера.Текст 				  = Глоб.глТекПеременныеКонстант.АдресПринтера;
	ЭтаФорма.ПортПринтера.Текст  				  = Строка(Глоб.глТекПеременныеКонстант.ПортПринтера);
	ЭтаФорма.ТипСоединения.УстановитьВыбор(СтруктураНастройкиПечать["ТипСоединения"]);
	ЭтаФорма.ТипПринтера.УстановитьВыбор(ТипПринтера);
	ЭтаФорма.Кодировка.УстановитьВыбор(Кодировка);
	ЭтаФорма.ВариантыПечати.УстановитьВыбор(ВариантПечати);
	ЭтаФорма.ПлотностьDPI.УстановитьВыбор(ПлотностьПечати);
	ЭтаФорма.ПечататьКакИзображение.Отмечен = СтруктураНастройкиПечать["ПечататьКакИзображение"];
	ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Отмечен = СтруктураНастройкиПечать["ПечатьЧерезТекстовыйДокумент"];
	
	Если Глоб.глТекПеременныеКонстант.ИмяУстройства <> "" Тогда
		ЭтаФорма.ИмяУстройства.ДобавитьЭлемент(СтруктураНастройкиПечать["ИмяУстройства"]);
	Иначе
		ЭтаФорма.ИмяУстройства.Выключен = Истина;
	КонецЕсли;
	
	СписокВидовНастроек["НастройкиПечати"] = СтруктураНастройкиПечать;
	
	Возврат 0;
КонецФункции

// Функция заполняет настройки сканирования из констант
//
Функция ЗаполнитьНастройкиСканирования()
	
	СтруктураНастройкиСканирования = Неопределено;
	
	СтруктураНастройкиСканирования[ИмяКлючаНаличияИзменения]	= Ложь;
	СтруктураНастройкиСканирования["ИспользоватьСканирование"]  = Глоб.глТекПеременныеКонстант.ИспользоватьСканирование;
	СтруктураНастройкиСканирования["ПрефиксВесовогоТовара"]		= Глоб.глТекПеременныеКонстант.ПрефиксВесовогоТовара;
	СтруктураНастройкиСканирования["ИмяСканера"] 	   			= Глоб.глТекПеременныеКонстант.ИмяСканера;
	
	ЭтаФорма.ПрефиксВесовогоТовара.Текст = Глоб.глТекПеременныеКонстант.ПрефиксВесовогоТовара;
	ЭтаФорма.ИспользоватьСканирование.Отмечен = Глоб.глТекПеременныеКонстант.ИспользоватьСканирование;
	ЭтаФорма.ИмяСканера.ДобавитьЭлемент(Слов DictCatalogsDialogFormsBuiltInCamera);
	Если Глоб.глТекПеременныеКонстант.ИмяСканера <> Слов DictCatalogsDialogFormsBuiltInCamera Тогда
		ЭтаФорма.ИмяСканера.ДобавитьЭлемент(Глоб.глТекПеременныеКонстант.ИмяСканера);
		ЭтаФорма.ИмяСканера.УстановитьВыбор(1);
	Иначе
		ЭтаФорма.ИмяСканера.УстановитьВыбор(0);
	КонецЕсли;
	
	СписокВидовНастроек["НастройкиСканирования"] = СтруктураНастройкиСканирования;
	
	Возврат 0;
КонецФункции

Функция ЗаполнитьОсновныеНастройки()
	
	СтруктураБыстрогоВыбора["ТипыСортировки"] = Неопределено;
	ВыбранныйТипСортировки = Константы.ТипСортировкиЕдиницИзмерения.Получить();
	ВыбранныйТипСортировки = ?(ВыбранныйТипСортировки = Неопределено, Перечисления.ТипыСортировкиЕдиницИзмерения.ПоНаименованию, ВыбранныйТипСортировки);
	Индекс = 0;
	ТипСортировки = 0;
	Для Каждого ТекТип Из Перечисления.ТипыСортировкиЕдиницИзмерения.ПолучитьСписок() Цикл
		ЭтаФорма.ТипыСортировок.ДобавитьЭлемент(Индекс, ТекТип.Представление());
		СтруктураБыстрогоВыбора["ТипыСортировки"][Индекс] = ТекТип;
		Если ТекТип = ВыбранныйТипСортировки Тогда
			ТипСортировки = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Заполнение списка типов закладок
	ЭтаФорма.РежимВыбораЗакладок.ДобавитьЭлемент(1, "Переключение");
	ЭтаФорма.РежимВыбораЗакладок.ДобавитьЭлемент(2, "Перелистывание");
	
	// Заполнение списка направления сортировки
	ЭтаФорма.НаправлениеСортировки.ДобавитьЭлемент(0, Слов DictCatalogsDialogFormsAscending);
	ЭтаФорма.НаправлениеСортировки.ДобавитьЭлемент(1, Слов DictCatalogsDialogFormsDescending);
	
	СтруктураНастройкиОсновные = Неопределено;
	
	СтруктураНастройкиОсновные[ИмяКлючаНаличияИзменения]  = Ложь;
	СтруктураНастройкиОсновные["ОсновнаяОрганизация"]  	  = Глоб.глТекПеременныеКонстант.РабочаяОрганизация;
	СтруктураНастройкиОсновные["ОтражатьВес"] 	   		  = Глоб.глТекПеременныеКонстант.ОтображатьВесВЖурнале;
	СтруктураНастройкиОсновные["ОтображатьАртикулы"] 	  = Глоб.глТекПеременныеКонстант.ОтображатьАртикулы;
	СтруктураНастройкиОсновные["ИспользоватьКомментарии"] = Глоб.глТекПеременныеКонстант.ИспользоватьКомментарии;
	СтруктураНастройкиОсновные["НаправлениеСортировки"]   = Глоб.глТекПеременныеКонстант.НаправлениеСортировки;
	СтруктураНастройкиОсновные["РежимВыбораЗакладок"]	  = Глоб.глТекПеременныеКонстант.РежимВыбораЗакладок - 1;
	СтруктураНастройкиОсновные["ТипыСортировок"]	      = ТипСортировки;
	
	ЭтаФорма.СписокДокументовПродажи.ДобавитьЭлемент(0, Перечисления.ВидыДокументов.Заказ.Представление());
	Если Глоб.глТекПеременныеКонстант.ТорговляСКолес И Не Глоб.ИспользуетсяБазоваяВерсия Тогда
		ЭтаФорма.СписокДокументовПродажи.ДобавитьЭлемент(1, Перечисления.ВидыДокументов.Реализация.Представление());
	Иначе
		Константы.ОсновнойДокументПродажи.Установить(0);
		Глоб.глТекПеременныеКонстант.ОсновнойДокументПродажи = 0;
	КонецЕсли;
	ЭтаФорма.СписокДокументовПродажи.УстановитьВыбор(Глоб.глТекПеременныеКонстант.ОсновнойДокументПродажи);
	
	ЭтаФорма.СписокТемПриложения.ДобавитьЭлемент(0, Слов DictCatalogsListFormThemeWhite);
	ЭтаФорма.СписокТемПриложения.ДобавитьЭлемент(1, Слов DictCatalogsListFormThemeAgent);
	ЭтаФорма.СписокТемПриложения.ДобавитьЭлемент(2, Слов DictCatalogsListFormThemeUser);
	ЭтаФорма.СписокТемПриложения.ДобавитьЭлемент(3, Слов DictCatalogsListFormThemeGradient);
	ЭтаФорма.СписокТемПриложения.УстановитьВыбор(Глоб.глТекПеременныеКонстант.ТемаПриложения);
	
	ЭтаФорма.ОсновнаяОрганизация.Текст 		 	= Глоб.ОпределитьЗначениеПоляОбъекта(Глоб.глТекПеременныеКонстант.РабочаяОрганизация, "Наименование");
	ЭтаФорма.ОтражатьВес.Отмечен 		     	= Глоб.глТекПеременныеКонстант.ОтображатьВесВЖурнале;
	ЭтаФорма.ОтображатьАртикулы.Отмечен 	 	= Глоб.глТекПеременныеКонстант.ОтображатьАртикулы;
	ЭтаФорма.ИспользоватьКомментарии.Отмечен 	= Глоб.глТекПеременныеКонстант.ИспользоватьКомментарии;
	ЭтаФорма.КаталогОбмена.Текст 			 	= Глоб.ПолучитьКаталогОбменаПоУмолчанию();
	ЭтаФорма.АвтозагрузкаНастроекИзЛК.Отмечен	= Глоб.глТекПеременныеКонстант.АвтозагрузкаНастроекИзЛК;
	ЭтаФорма.ПоказыватьРабочийСтол.Отмечен		= Глоб.глТекПеременныеКонстант.ПоказыватьРабочийСтол;
	ЭтаФорма.ПоказыватьРабочийСтол.УстановитьПриНажатии(ПоказыватьРабочийСтол_ПриНажатии);
	
	ЭтаФорма.НаправлениеСортировки.УстановитьВыбор(Глоб.глТекПеременныеКонстант.НаправлениеСортировки);
	ЭтаФорма.РежимВыбораЗакладок.УстановитьВыбор(Глоб.глТекПеременныеКонстант.РежимВыбораЗакладок - 1);	
	ЭтаФорма.ТипыСортировок.УстановитьВыбор(ТипСортировки);
	
	СписокВидовНастроек["НастройкиОсновные"] = СтруктураНастройкиОсновные;
	
	Возврат 0;
КонецФункции

// Функция заполняет настройки размеров шрифта
//
Функция ЗаполнитьНастройкиШрифта()
	
	СтруктураНастройкиШрифта = Неопределено;
	
	НастройкиШрифтаДляПроверки = Неопределено;
	СписокШрифтов = Глоб.СформироватьМассивШрифтов();
	
	СписокНастроек = ПолучитьСписокНастроекШрифта();
		
	Для Каждого ТекНастройка Из СписокНастроек Цикл
		
		СоздатьКонтролыШрифта(ТекНастройка, СписокШрифтов);
		
	КонецЦикла;
	ИзменитьПоложениеКонтроловНастройкиШрифта();
	
	СтруктураБыстрогоВыбора["РасположенияКнопок"] = Неопределено;
	ВыбранноеРасположениеКнопок = Глоб.глТекПеременныеКонстант.РасположениеКнопок;
	Индекс = 0;
	ТипРасположения = 1;
	Для Каждого ЭлементПеречисления Из Перечисления.ГоризонтальноеРасположение.ПолучитьСписок() Цикл
		ЭтаФорма.РасположениеКнопок.ДобавитьЭлемент(Индекс, ЭлементПеречисления.Представление());
		СтруктураБыстрогоВыбора["РасположенияКнопок"][Индекс] = ЭлементПеречисления;
		Если ЭлементПеречисления = ВыбранноеРасположениеКнопок Тогда
			ТипРасположения = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СтруктураНастройкиШрифта[ИмяКлючаНаличияИзменения]  = Ложь;
	СтруктураНастройкиШрифта["РасположениеКнопок"] 	    = ВыбранноеРасположениеКнопок;
	СтруктураНастройкиШрифта["ФлЗакрепитьПанельКнопок"] = Глоб.глТекПеременныеКонстант.ЗакрепитьПанельКнопок;
	
	ЭтаФорма.РасположениеКнопок.УстановитьВыбор(ТипРасположения);
	ЭтаФорма.ФлЗакрепитьПанельКнопок.Отмечен = Глоб.глТекПеременныеКонстант.ЗакрепитьПанельКнопок;
	ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.Отмечен = Константы.АльтернативныйРежимОтображенияКомментариев.Получить();
	
	СписокВидовНастроек["НастройкиШрифта"] = СтруктураНастройкиШрифта;
	
	Возврат 0;
КонецФункции

Функция УстановитьВидимостьКонтроловТрека()
	
	ЭтаФорма.ЗаписьТрека.Выключен   	  = Не ЭтаФорма.ИспользоватьGPS.Отмечен;
	ДоступностьКонтролов = Не ЭтаФорма.ЗаписьТрека.Отмечен Или Не ЭтаФорма.ИспользоватьGPS.Отмечен;
	ЭтаФорма.ПериодЗаписиТрека.Выключен   = ДоступностьКонтролов;
	ЭтаФорма.ВремяНачала.Выключен 	      = ДоступностьКонтролов;
	ЭтаФорма.ВремяОкончания.Выключен      = ДоступностьКонтролов;
	ЭтаФорма.ЗаписыватьСкорость.Выключен  = ДоступностьКонтролов;
	ЭтаФорма.ИспользоватьДатуGPS.Выключен = ДоступностьКонтролов;
	ЭтаФорма.ФлФоноваяПередача.Выключен	  = ДоступностьКонтролов;
	ЭтаФорма.ИнтервалПередачи.Выключен	  = ДоступностьКонтролов;
	ОтмеченныеДни = 0;
	ИндМассива = 1;
	Пока ИндМассива < 8 Цикл
		ЭтаФорма["Фл" + Строка(ИндМассива)].Выключен = ДоступностьКонтролов;
		Если ЭтаФорма["Фл" + Строка(ИндМассива)].Отмечен Тогда
			ОтмеченныеДни = ОтмеченныеДни + 1;
		КонецЕсли;
		ИндМассива = ИндМассива + 1;
	КонецЦикла;
	Если Число(ОтмеченныеДни) = Число(0) И (Не ДоступностьКонтролов) Тогда
		ИндМассива = 1;
		Пока ИндМассива < 6 Цикл
			ЭтаФорма["Фл" + Строка(ИндМассива)].Отмечен = Истина;
			ИндМассива = ИндМассива + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Процедура ИзменитьПоложениеКонтроловККТ()

	ОриентацияЭкрана = Глоб.ПолучитьОриентациюЭкрана();
	Отступ = Глоб.КонстантыИнтерфейса["мОтступСверху"];
	Ширина = ЭтаФорма.Ширина;
	Высота = ЭтаФорма.Высота;

	ВысотаНадписи	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()];
	ВысотаПоля		= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтПоле.Представление()];
	ВысотаКнопки	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()];
	
	РабочаяШирина = Ширина + 2 - 4 * Отступ;
	РабочаяВысота = ЭтаФорма.Высота - ЭтаФорма.Закладки.ВысотаЗаголовка - 12;	
	
	ЭлШирина = РабочаяШирина - Отступ;

	Если ОриентацияЭкрана = Перечисления.ОриентацияЭкрана.Ландшафт Тогда
		ШиринаКнопки  = Глоб.ПолучитьШиринуКнопки();
	Иначе
		колКнопок = 3;
		ШиринаКнопки = (РабочаяШирина-Отступ)/колКнопок;
	КонецЕсли;
	ШиринаКнопки = ШиринаКнопки - Отступ;
	
	// Изменение положения контролов "ККТ"
	Верх = Отступ;
	ЭтаФорма.ИспользоватьККТ.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаКнопки);
	Верх = Верх + ВысотаНадписи + 10 + Отступ;
	
	РазмерыФлага = ВернутьРазмерыКонтрола("ККТУпрощенныйРежимРаботы", ЭлШирина);
	ЭтаФорма.ККТУпрощенныйРежимРаботы.УстановитьГраницы(Отступ, Верх, ЭлШирина, РазмерыФлага.Высота + 10);
	Верх = Верх + РазмерыФлага.Высота + 10 + Отступ * 2;
	
	РазмерыФлага = ВернутьРазмерыКонтрола("ККТАвтоподключение", ЭлШирина);
	ЭтаФорма.ККТАвтоподключение.УстановитьГраницы(Отступ, Верх, ЭлШирина, РазмерыФлага.Высота + 10);
	Верх = Верх + РазмерыФлага.Высота + 10 + Отступ * 2;
	
	РазмерыФлага = ВернутьРазмерыКонтрола("ККТИспользоватьРасчетыККТ", ЭлШирина);
	ЭтаФорма.ККТИспользоватьРасчетыККТ.УстановитьГраницы(Отступ, Верх, ЭлШирина, РазмерыФлага.Высота + 10);
	Верх = Верх + РазмерыФлага.Высота + 10 + Отступ * 2;

	ЭтаФорма.ККТНадписьОрганизация.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТСписокОрганизаций.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.НадписьМодельККТ.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТСписокМоделей.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.НадписьККТТипСоединения.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТТипСоединения.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.ККТНадписьШиринаЛенты.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТСписокШиринаЛенты.УстановитьГраницы(Отступ, Верх, ЭлШирина - Целое(ШиринаКнопки * 1.2) - Отступ * 2, ВысотаПоля);
	ЭтаФорма.ККТУстановитьШирину.УстановитьГраницы(ЭлШирина - Целое(ШиринаКнопки * 1.2), Верх, Целое(ШиринаКнопки * 1.2) + Отступ, ВысотаКнопки);
	Верх = Верх + ВысотаПоля + Отступ;
	
	Bluetooth = Глоб.ЧислаРавны(Глоб.глТекПеременныеКонстант.ТипСоединенияККТ, 0);

	ЭтаФорма.НадписьККТАдресККМ.Видимость = Не Bluetooth;
	ЭтаФорма.ККТАдресККМ.Видимость = Не Bluetooth;
	ЭтаФорма.НадписьККТПортККМ.Видимость = Не Bluetooth;
	ЭтаФорма.ККТПортККМ.Видимость = Не Bluetooth;

	ЭтаФорма.НадписьККТИмяУстройства.Видимость = Bluetooth;
	ЭтаФорма.ККТИмяУстройства.Видимость = Bluetooth;
	ЭтаФорма.ККТКнопкаОбновить.Видимость = Bluetooth;
	
	Если Глоб.глТекПеременныеКонстант.ТипСоединенияККТ = 0 Тогда

		ЭтаФорма.НадписьККТИмяУстройства.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.ККТИмяУстройства.УстановитьГраницы(Отступ, Верх, ЭлШирина - Целое(ШиринаКнопки * 1.2) - Отступ * 2, ВысотаПоля);
		ЭтаФорма.ККТКнопкаОбновить.УстановитьГраницы(ЭлШирина - Целое(ШиринаКнопки * 1.2), Верх, Целое(ШиринаКнопки * 1.2) + Отступ, ВысотаКнопки);

	ИначеЕсли Глоб.глТекПеременныеКонстант.ТипСоединенияККТ = 1 Тогда

		ЭтаФорма.НадписьККТАдресККМ.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
		ЭтаФорма.НадписьККТПортККМ.УстановитьГраницы(Отступ + ЭлШирина - ШиринаКнопки, Верх, ШиринаКнопки, ВысотаНадписи);
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.ККТАдресККМ.УстановитьГраницы(Отступ, Верх, ЭлШирина - ШиринаКнопки - Отступ, ВысотаПоля);
		ЭтаФорма.ККТПортККМ.УстановитьГраницы(Отступ + ЭлШирина - ШиринаКнопки, Верх, ШиринаКнопки, ВысотаПоля);
		
	КонецЕсли;

	Верх = Верх + ВысотаПоля + Отступ;

	ЭтаФорма.ККТНадписьПарольПользователя.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТПарольПользователя.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.ККТНадписьПарольАдминистратора.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ККТПарольАдминистратора.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
		
	ВысотаКнопки = ВысотаКнопки + 4;

	ЭтаФорма.ККТСоединение.УстановитьГраницы(Отступ, Верх, ЭлШирина - ВысотаКнопки * 2 - 15, ВысотаКнопки);

	ЭтаФорма.ККТСтатус.УстановитьГраницы(ЭлШирина - ВысотаКнопки * 2 - 5, Верх, ВысотаКнопки, ВысотаКнопки);
	ЭтаФорма.ККТСтатус.УстановитьТип(Глоб.МодульРаботаСФормами.ТипКнопкаПрозрачная);

	ЭтаФорма.ККТСигнал.УстановитьГраницы(ЭлШирина - ВысотаКнопки + Отступ, Верх, ВысотаКнопки, ВысотаКнопки);
	ЭтаФорма.ККТСигнал.УстановитьТип(Глоб.МодульРаботаСФормами.ТипКнопкаПрозрачная);
	Верх = Верх + ВысотаКнопки + Отступ * 2;
	
	ВысотаСтатуса = 300;
	Если (РабочаяВысота - Верх - Отступ) < ВысотаСтатуса Тогда
		ЭтаФорма.СтатусККТ.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаСтатуса);
	Иначе
		ЭтаФорма.СтатусККТ.УстановитьГраницы(Отступ, Верх, ЭлШирина, РабочаяВысота - Верх - Отступ);
	КонецЕсли;

КонецПроцедуры

// Функция изменяет положение кнопки загрузки шрифтов
//
Функция ИзменитьПоложениеКнопкиЗагрузкиШрифтов()
	
	ОриентацияЭкрана = Глоб.ПолучитьОриентациюЭкранаНовая(ЭтаФорма);
	Отступ = 3;
	Если ОриентацияЭкрана = Перечисления.ОриентацияЭкрана.Ландшафт Тогда
		РабочаяШирина = ЭтаФорма.Высота - 2*Отступ;
	Иначе
		РабочаяШирина = ЭтаФорма.Ширина - 2*Отступ;
	КонецЕсли;
	ШиринаКонтрола = РабочаяШирина;
	
	Лево = (ЭтаФорма.Ширина / 2) - (ШиринаКонтрола / 2);
	
	ВысотаНадписи	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()];
	ВысотаКнопки	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()];
	
	ТипСоединения = ЭтаФорма.ТипСоединения.ПолучитьТекущийВыбор();
	Если Глоб.ЧислаРавны(ТипСоединения, 0, 0) Тогда
		Верх = ЭтаФорма.ПортПринтера.Верх + ЭтаФорма.ПортПринтера.Высота + Отступ;
	Иначе
		Верх = ЭтаФорма.КнопкаОбновить.Верх + ЭтаФорма.КнопкаОбновить.Высота + Отступ;
	КонецЕсли;
	
	ЭтаФорма.НадписьПодсказка.УстановитьГраницы(Отступ, Верх, ЭтаФорма.Ширина - 2*Отступ, 3*ВысотаНадписи);
	Верх = Верх + 3*ВысотаНадписи + Отступ;
	ЭтаФорма.КнопкаЗагрузитьШрифт.УстановитьГраницы(Лево, Верх, РабочаяШирина, ВысотаКнопки);
	
	Возврат 0;
КонецФункции

Функция ИзменитьПоложениеКонтролов()
	Перем Верх;

	ОриентацияЭкрана = Глоб.ПолучитьОриентациюЭкрана();
	Отступ = Глоб.КонстантыИнтерфейса["мОтступСверху"];
	Ширина = ЭтаФорма.Ширина;
	Высота = ЭтаФорма.Высота;

	Глоб.УстановитьРазмерШрифтаЭлементовФормы(ЭтаФорма);

	РабочаяШирина = Ширина + 2 - 4 * Отступ;//Ширина - 3*Отступ;
	ВысотаЗаголовка = Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтЗакладка.Представление()];
	ЭтаФорма.Закладки.ВысотаЗаголовка = Целое(ВысотаЗаголовка);
//	РабочаяВысота = Высота - ЭтаФорма.Закладки.ВысотаЗаголовка - 4*Отступ;
	РабочаяВысота = ЭтаФорма.Высота - ЭтаФорма.Закладки.ВысотаЗаголовка - 12;
	ЭтаФорма.Закладки.УстановитьГраницы(0, 0, Ширина, Высота);
	
	ВысотаНадписи	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()];
	ВысотаПоля		= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтПоле.Представление()];
	ВысотаКнопки	= Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()];
	МаксВысота 		= ?(ВысотаПоля > ВысотаНадписи, ВысотаПоля, ВысотаНадписи);	
	ВысотаGPS		= ?(МаксВысота > ВысотаПоля, МаксВысота, ВысотаПоля);
	ВысотаКонтрола  = ?(ВысотаКнопки > ВысотаПоля, ВысотаКнопки, ВысотаПоля);	
	
	ЭлШирина = РабочаяШирина - Отступ;
	ШиринаКонтрола = Ширина - Отступ * 4;
	//////////////////////////////////////////////
	//Размещение контролов на основной закладке//
	//////////////////////////////////////////////
	Верх = Отступ;
	
	ЭтаФорма.ПанельПрокрутки.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);
	ЭтаФорма.ПанельПрокруткиПечать.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);
	ЭтаФорма.ПанельПрокруткиСканирование.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);
	ЭтаФорма.ПанельПрокруткиШрифт.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);
	ЭтаФорма.ПанельПрокруткиККТ.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);


//	ТекстНадписи = СокрЛП(ЭтаФорма.НадписьПлотностьШрифта.Текст);
//	ШрифтНадписи = ЭтаФорма.НадписьПлотностьШрифта.Шрифт;
//	РазмерыНадписи = ПолучитьРазмерТекста(ТекстНадписи, ШрифтНадписи, ЭлШирина);
//	ЭтаФорма.НадписьПлотностьШрифта.УстановитьГраницы(Отступ, Верх, ЭлШирина, РазмерыНадписи.Высота+10);
//	Верх = Верх + РазмерыНадписи.Высота + 10 + Отступ * 2;
	
	// Флаг автозагрузки настроек обмена из личного кабинета
	ТекстФлага = СокрЛП(ЭтаФорма.АвтозагрузкаНастроекИзЛК.Текст);
	ШрифтФлага = ЭтаФорма.АвтозагрузкаНастроекИзЛК.Шрифт;
	РазмерыФлага = ПолучитьРазмерТекста(ТекстФлага, ШрифтФлага, ЭлШирина);
	Если РазмерыФлага.Высота > ВысотаКонтрола Тогда
		ВысотаФлага = РазмерыФлага.Высота;
	Иначе
		ВысотаФлага = ВысотаКонтрола;
	КонецЕсли;
	ЭтаФорма.АвтозагрузкаНастроекИзЛК.УстановитьГраницы(Отступ, Верх, ШиринаКонтрола, ВысотаФлага + 10);
	Верх = Верх + ВысотаФлага + 10 + Отступ;

	//КаталогОбмена
	ЭтаФорма.НадписьКаталогОбмена.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.КаталогОбмена.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	
	//Основная организация
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.НадписьОсновнаяОрганизация.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ОсновнаяОрганизация.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	
	//Тип сортировки единиц измерения
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.НадписьТипСортировки.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ТипыСортировок.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	
	//Направление сортировки единиц измерения
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.НадписьНаправлениеСортировки.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.НаправлениеСортировки.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	
	ОтступФл = Отступ;
	ШиринаФлагов = ЭлШирина - 20;
	
	//Направление сортировки единиц измерения
	ЭтаФорма.РежимВыбораЗакладок.Показать(0);
	ЭтаФорма.НадписьРежимВыбораЗакладок.Показать(0);
	
	//ОтражатьВес
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.ОтображатьАртикулы.УстановитьГраницы(ОтступФл, Верх, ШиринаФлагов, ВысотаПоля);
	
	//Использовать комментарии
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.ИспользоватьКомментарии.УстановитьГраницы(ОтступФл, Верх, ШиринаФлагов, ВысотаПоля);
	
	//////////////////////////////////////////////
	//Размещение настроек журнала				//
	//////////////////////////////////////////////
	
	//ОтражатьВес
	ЭтаФорма.ОтражатьВес.УстановитьГраницы(ОтступФл, 3, ШиринаФлагов, ВысотаПоля);
	//ЭтаФорма.ОтображатьАртикулы.УстановитьГраницы(Отступ, 3, ЭлШирина, ВысотаПоля);
	
	Верх = Отступ + ВысотаПоля + Отступ;
	ЭтаФорма.КнопкаВниз.УстановитьГраницы(Отступ, Верх, ВысотаКнопки, ВысотаКнопки);
	
	Лево = Отступ + 2 * Отступ + ВысотаКнопки;
	ЭтаФорма.КнопкаВверх.УстановитьГраницы(Лево, Верх, ВысотаКнопки, ВысотаКнопки);
	
	Лево = Лево + 2 * Отступ + ВысотаКнопки;
	ЭтаФорма.КнопкаВосстановить.УстановитьГраницы(Лево, Верх, РабочаяШирина/2, ВысотаКнопки);
	
	Верх = Верх + ВысотаКнопки + Отступ;
	ЭтаФорма.ВидимыеВкладки.УстановитьГраницы(Отступ, Верх, РабочаяШирина, РабочаяВысота - (4*Отступ + ВысотаКнопки + ВысотаПоля));
	
	//////////////////////////////////////////////
	//Размещение настроек GPS					//
	//////////////////////////////////////////////
	Попытка
		// Заключено в попытку так как не на всех дизайнах используется
		ЭтаФорма.ПанельПрокруткиGPS.УстановитьГраницы(0, 0, РабочаяШирина, РабочаяВысота);
	Исключение КонецПопытки;
	
	Верх = Отступ;
	
	ЭтаФорма.ИспользоватьGPS.УстановитьГраницы(Отступ, Верх, РабочаяШирина, ВысотаПоля);
	ОтступGPS = Отступ;
	КоординатаРамкиТрекинга = Верх + ВысотаПоля;
	ВысотаРамкиТрекинга = 0.5*ВысотаПоля;
	
	//Запись трека
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.ЗаписьТрека.УстановитьГраницы(ОтступGPS, Верх, ШиринаФлагов, ВысотаПоля);
	
	//Период записи трека	
	Верх = КоординатаРамкиТрекинга + ВысотаПоля + Отступ;
	ШиринаНадписиПериода = 2*(ЭлШирина/3) - 2*Отступ;
	ЭтаФорма.НадписьПериодЗаписиТрека.УстановитьГраницы(ОтступGPS, Верх, ШиринаНадписиПериода, ВысотаНадписи);
	ЭтаФорма.ПериодЗаписиТрека.УстановитьГраницы(ОтступGPS + ШиринаНадписиПериода + Отступ, Верх, ЭлШирина - ШиринаНадписиПериода - Отступ, ВысотаПоля);
	
	//Записывать скорость
	Верх = Верх + МаксВысота + Отступ;
	ЭтаФорма.ЗаписыватьСкорость.УстановитьГраницы(ОтступGPS, Верх, ШиринаФлагов, ВысотаПоля);
	
	//Использовать дату GPS
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.ИспользоватьДатуGPS.УстановитьГраницы(ОтступGPS, Верх, ШиринаФлагов, ВысотаПоля);
	
	ОтступGPS = 2*Отступ;
	
	Если ОриентацияЭкрана = Перечисления.ОриентацияЭкрана.Ландшафт Тогда		// ландшафт
		//Установка контролов времени работы записи трекинга
		Верх = Верх + ВысотаПоля + Отступ;
		КоординатаРамкиРабочегоВремени = Верх;
		ВысотаРамкиРабочегоВремени = 5*ВысотаПоля + ВысотаНадписи + 7*Отступ;
		ЭтаФорма.РамкаРабочееВремя.УстановитьГраницы(Отступ, Верх, ЭлШирина - 3, ВысотаРамкиРабочегоВремени);
		
		Верх = КоординатаРамкиРабочегоВремени + ВысотаНадписи + Отступ;
		РазмерВремени = 2*(ЭлШирина/3) - 2*Отступ;
		ОтступДнейНедели = ОтступGPS;
		ЭтаФорма.НадписьНачало.УстановитьГраницы(ОтступGPS, Верх, РазмерВремени/2-Отступ, ВысотаНадписи);
		ЭтаФорма.ВремяНачала.УстановитьГраницы(ОтступGPS + РазмерВремени/2-Отступ, Верх, РазмерВремени/2, ВысотаПоля);
		
		Верх = Верх + МаксВысота + Отступ;
		ЭтаФорма.НадписьОкончание.УстановитьГраницы(ОтступGPS, Верх, РазмерВремени/2-Отступ, ВысотаНадписи);
		ЭтаФорма.ВремяОкончания.УстановитьГраницы(ОтступGPS + РазмерВремени/2-Отступ, Верх, РазмерВремени/2, ВысотаПоля);
		
		ШиринаДнейНедели = (ЭлШирина - 4 * Отступ) / 4;
		
		Верх = Верх + МаксВысота + Отступ;
		ЭтаФорма.Фл1.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл2.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл3.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл4.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		
		Верх = Верх + ВысотаПоля + Отступ;
		ОтступДнейНедели = ОтступGPS;
		ЭтаФорма.Фл5.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл6.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл7.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		
		//Установка работы фоновой передачи трекинга
		Верх = КоординатаРамкиРабочегоВремени + ВысотаРамкиРабочегоВремени + Отступ;
		КоординатаРамкиФоновойПередачи = Верх;
		ВысотаРамкиФоновойПередачи = 2*ВысотаПоля + ВысотаНадписи + 3*Отступ;
		ЭтаФорма.РамкаФоноваяПередача.УстановитьГраницы(Отступ, Верх, ЭлШирина - 3, ВысотаРамкиФоновойПередачи);	
		
		Верх = Верх + ВысотаНадписи;
		ЭтаФорма.ФлФоноваяПередача.УстановитьГраницы(ОтступGPS, Верх, ЭлШирина - 3, ВысотаПоля);
		
		Верх = Верх + ВысотаПоля + Отступ;
		РазмерТекста = ЭлШирина/2;
		ЭтаФорма.НадписьИнтервалПередачи.УстановитьГраницы(ОтступGPS, Верх, РазмерТекста - Отступ, ВысотаНадписи);
		ЭтаФорма.ИнтервалПередачи.УстановитьГраницы(ОтступGPS + РазмерТекста + Отступ, Верх, РазмерТекста/2, ВысотаПоля);
		
	Иначе
		
		//Установка контролов времени работы записи трекинга
		Верх = Верх + ВысотаПоля + Отступ;
		КоординатаРамкиРабочегоВремени = Верх;
		ВысотаРамкиРабочегоВремени = 5*ВысотаПоля + ВысотаНадписи + 7*Отступ;
		ЭтаФорма.РамкаРабочееВремя.УстановитьГраницы(Отступ, Верх, ЭлШирина - 3, ВысотаРамкиРабочегоВремени);
		
		Верх = КоординатаРамкиРабочегоВремени + ВысотаПоля/2 + Отступ;
		ЭтаФорма.НадписьНачало.УстановитьГраницы(ОтступGPS, Верх, ШиринаФлагов/2, ВысотаНадписи);
		ЭтаФорма.ВремяНачала.УстановитьГраницы(ОтступGPS + ШиринаФлагов/2+Отступ, Верх, ШиринаФлагов/2-Отступ, ВысотаПоля);
		
		Верх = Верх + МаксВысота + Отступ;
		ЭтаФорма.НадписьОкончание.УстановитьГраницы(ОтступGPS, Верх, ШиринаФлагов/2, ВысотаНадписи);
		ЭтаФорма.ВремяОкончания.УстановитьГраницы(ОтступGPS + ШиринаФлагов/2+Отступ, Верх, ШиринаФлагов/2-Отступ, ВысотаПоля);
		
		Верх = Верх + МаксВысота + Отступ;
		ШиринаДнейНедели = (ЭлШирина - 2*Отступ) / 3;
		
		ОтступДнейНедели = ОтступGPS;
		ЭтаФорма.Фл1.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл4.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл7.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		
		Верх = Верх + ВысотаПоля + Отступ;
		ОтступДнейНедели = ОтступGPS;
		ЭтаФорма.Фл2.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл5.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		
		Верх = Верх + ВысотаПоля + Отступ;
		ОтступДнейНедели = ОтступGPS;
		ЭтаФорма.Фл3.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		ОтступДнейНедели = ОтступДнейНедели + ШиринаДнейНедели + Отступ;
		ЭтаФорма.Фл6.УстановитьГраницы(ОтступДнейНедели, Верх, ШиринаДнейНедели, ВысотаПоля);
		
		//Установка работы фоновой передачи трекинга
		Верх = КоординатаРамкиРабочегоВремени + ВысотаРамкиРабочегоВремени + Отступ;
		КоординатаРамкиФоновойПередачи = Верх;
		ВысотаРамкиФоновойПередачи = 2*ВысотаПоля + ВысотаНадписи + 3*Отступ;
		ЭтаФорма.РамкаФоноваяПередача.УстановитьГраницы(3, Верх, ЭлШирина - 3, ВысотаРамкиФоновойПередачи);	
		
		Верх = Верх + ВысотаПоля;
		ЭтаФорма.ФлФоноваяПередача.УстановитьГраницы(ОтступGPS, Верх, ЭлШирина - 3, ВысотаПоля);
		
		Верх = Верх + ВысотаНадписи + Отступ;
		РазмерТекста = ЭлШирина/2;
		ЭтаФорма.НадписьИнтервалПередачи.УстановитьГраницы(ОтступGPS, Верх, РазмерТекста - Отступ, ВысотаНадписи);
		ЭтаФорма.ИнтервалПередачи.УстановитьГраницы(ОтступGPS + РазмерТекста + Отступ, Верх, РазмерТекста/2, ВысотаПоля);
		
	КонецЕсли;
	
	// Изменение положения контролов Настроек принтера
	// Тип принтера
	Верх = Отступ;
	ЭтаФорма.ИспользоватьПечать.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаНадписи + Отступ;
	
	// Кодировка текста
	ЭтаФорма.НадписьКодировка.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.Кодировка.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	// Варианты печати
	ЭтаФорма.НадписьВариантыПечати.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ВариантыПечати.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтотВерх = Верх;
	
	// Плотность шрифта
	ТекстНадписи = СокрЛП(ЭтаФорма.НадписьПлотностьШрифта.Текст);
	ШрифтНадписи = ЭтаФорма.НадписьПлотностьШрифта.Шрифт;
	РазмерыНадписи = ПолучитьРазмерТекста(ТекстНадписи, ШрифтНадписи, ЭлШирина);
	ЭтаФорма.НадписьПлотностьШрифта.УстановитьГраницы(Отступ, Верх, ЭлШирина, РазмерыНадписи.Высота+10);
	Верх = Верх + РазмерыНадписи.Высота + 10 + Отступ * 2;
	ЭтаФорма.ПлотностьШрифта.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ * 2;

	// Печать через текстовый документ
	ТекстФлага = СокрЛП(ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Текст);
	ШрифтФлага = ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Шрифт;
	РазмерыФлага = ПолучитьРазмерТекста(ТекстФлага, ШрифтФлага, ЭлШирина);
	Если РазмерыФлага.Высота > ВысотаКонтрола Тогда
		ВысотаФлага = РазмерыФлага.Высота;
	Иначе
		ВысотаФлага = ВысотаКонтрола;
	КонецЕсли;
	ЭтаФорма.ПечатьЧерезТекстовыйДокумент.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаФлага + 10);
	Верх = Верх + ВысотаФлага + 10 + Отступ * 2;
	
	// Тип принтера
	ЭтаФорма.НадписьТипПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ТипПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);	
	Верх = Верх + ВысотаПоля + Отступ;
	
	// Тип соединения
	ЭтаФорма.НадписьТипСоединения.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ТипСоединения.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);	
	
	Если ОриентацияЭкрана = Перечисления.ОриентацияЭкрана.Ландшафт Тогда
		ШиринаКнопки  = Глоб.ПолучитьШиринуКнопки();
	Иначе
		колКнопок = 3;
		ШиринаКнопки = (РабочаяШирина-Отступ)/колКнопок;
	КонецЕсли;
	ШиринаКнопки = ШиринаКнопки - Отступ;
	
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.НадписьИмяУстройства.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	ЭтаФорма.ИмяУстройства.УстановитьГраницы(Отступ, Верх + ВысотаНадписи + Отступ, ЭлШирина - ШиринаКнопки - Отступ, ВысотаПоля);
	ЭтаФорма.КнопкаОбновить.УстановитьГраницы(Отступ + ЭлШирина - ШиринаКнопки + Отступ, Верх + ВысотаНадписи + Отступ, ШиринаКнопки, ВысотаКнопки);
	ВерхПоля = Верх + 2 * ВысотаПоля + 2 * Отступ;
	ЭтаФорма.НадписьИнформацияПоиска.УстановитьГраницы(Отступ, ВерхПоля, ЭлШирина, 2*ВысотаНадписи);
	ЭтаФорма.НадписьИмяУстройства.Показать(0);
	ЭтаФорма.ИмяУстройства.Показать(0);
	ЭтаФорма.КнопкаОбновить.Показать(0);
	// Адрес принтера
	Если ОриентацияЭкрана = 1 Тогда
		Лево = Отступ + (ЭлШирина /2) + Отступ;
		ЭтаФорма.НадписьАдресПринтера.УстановитьГраницы(Отступ, Верх, (ЭлШирина /2) - Отступ , ВысотаНадписи);
		ЭтаФорма.НадписьПортПринтера.УстановитьГраницы(Лево, Верх, (ЭлШирина /2) - Отступ , ВысотаНадписи);
		
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.АдресПринтера.УстановитьГраницы(Отступ, Верх, (ЭлШирина /2), ВысотаПоля);
		ЭтаФорма.ПортПринтера.УстановитьГраницы(Лево, Верх, (ЭлШирина /2) - Отступ, ВысотаПоля);
	Иначе
		ЭтаФорма.НадписьАдресПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.АдресПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
		
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.НадписьПортПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.ПортПринтера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	КонецЕсли;
	
	// Плотность печати (DPI)
	ТекстНадписи = СокрЛП(ЭтаФорма.НадписьПлотностьDPI.Текст);
	ШрифтНадписи = ЭтаФорма.НадписьПлотностьDPI.Шрифт;
	РазмерыНадписи = ПолучитьРазмерТекста(ТекстНадписи, ШрифтНадписи, ЭлШирина);
	ЭтаФорма.НадписьПлотностьDPI.УстановитьГраницы(Отступ, ЭтотВерх, ЭлШирина, РазмерыНадписи.Высота+10);
	Верх = ЭтотВерх + РазмерыНадписи.Высота + 10 + Отступ * 2;
	ЭтаФорма.ПлотностьDPI.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ * 2;
		
	// Флаг "Как изображение"
	ЭтаФорма.ПечататьКакИзображение.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);

	ЭтаФорма.НадписьПлотностьDPI.Показать(0);
	ЭтаФорма.ПлотностьDPI.Показать(0);
	ЭтаФорма.ПечататьКакИзображение.Показать(0);
	
	
	ИзменитьПоложениеКнопкиЗагрузкиШрифтов();
	
	ИзменитьПоложениеКонтроловККТ();

	// Изменение положения контролов Настроек сканирования
	Верх = Отступ;
	ЭтаФорма.ИспользоватьСканирование.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.НадписьПрефиксВесовогоТовара.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ПрефиксВесовогоТовара.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаПоля);
	Верх = Верх + ВысотаПоля + Отступ;
	
	ЭтаФорма.НадписьИмяСканера.УстановитьГраницы(Отступ, Верх, ЭлШирина, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	ЭтаФорма.ИмяСканера.УстановитьГраницы(Отступ, Верх, ЭлШирина - ШиринаКнопки - Отступ, ВысотаПоля);
	ЭтаФорма.КнопкаОбновитьСканеры.УстановитьГраницы(Отступ + ЭлШирина - ШиринаКнопки, Верх, ШиринаКнопки, ВысотаКнопки);
	Верх = Верх + ВысотаПоля + Отступ;
	ЭтаФорма.НадписьИнформацияПоискаСканера.УстановитьГраницы(Отступ, Верх, ЭлШирина, 2*ВысотаНадписи);
	// Изменение положения контролов Настроек сканирования
	
	// Изменение положения контролов настроек шрифтов
	// Настройки рамки шрифтов	
	// Размер шрифта подписей
	Верх = Отступ;
	ШиринаКартинки = Глоб.КонстантыИнтерфейса["РазмерИконки"];
	ШиринаПредставления = РабочаяШирина - ((ШиринаКартинки*2) + (ШиринаКартинки*2*1.5));
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Имя.Видимость = Ложь;
	
	Если ОриентацияЭкрана = 1 Тогда
		ШиринаДляКолонок = РабочаяШирина/2;
	Иначе
		ШиринаДляКолонок = РабочаяШирина;
	КонецЕсли;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.АвтоВысотаЯчейки  = Ложь;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.МинимальнаяШирина  = 1;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.МаксимальнаяШирина  = 500;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.МинимальнаяВысота  = 1;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.МаксимальнаяВысота  = 500;
	
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.Ширина 	= ШиринаДляКолонок*0.8;
	ЭтаФорма.ВидимыеВкладки.Колонки.Документы.ВысотаЯчейки  = 1.5*Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтТаблица.Представление()];
	Если Не ПоискBluetoothУстройств Тогда
		ЭтаФорма.НадписьИнформацияПоиска.Показать(0);
	КонецЕсли;
	
//	// Изменить положение контролов настроек обмена
//	колКнопок = 3;
//	ШиринаКнопки = (РабочаяШирина - 3*Отступ)/колКнопок;
//	ВысотаТаблицы = РабочаяВысота - ВысотаКнопки - Отступ;
//	ЭтаФорма.СписокНастроекОбмена.УстановитьГраницы(Отступ, Отступ, РабочаяШирина - Отступ, ВысотаТаблицы);
	
	РазмерПанели  = Неопределено;
	РазмерПанели.Ширина = РабочаяШирина;
	РазмерПанели.Высота = РабочаяВысота;
	СоздатьКнопкиНастроекОбмена(РазмерПанели);
	
//	Глоб.УстановитьРазмерШрифтаЭлементовФормы(ЭтаФорма);

	Возврат 0;
КонецФункции

Функция КнВызовПанели_УстановитьМасштаб(ЭлементКартинки)
	
//	ЭлементКартинки.ПодобратьМасштаб();
	
	Возврат 0;
КонецФункции

Функция КнВызовПанели_ПриНажатии()
	
	ВидимостьПанелиКнопок = Ложь;
	ИзменитьВидимостьПанелиКнопок();
	
	Возврат 0;
КонецФункции

Функция СоздатьКнопкиНастроекОбмена(РазмерПанели)

	Отступ 		 = Глоб.КонстантыИнтерфейса["мОтступСлева"];
	ВысотаКнопки = Глоб.КонстантыИнтерфейса["ВысотаКнопкиБара"];
//	СтруктураОбработчиков = Неопределено;
//	СтруктураОбработчиков.ОбработчикСоздания  = Глоб.ПолучитьФункциюМодуля(КнопкаСоздатьНастройку_ПриНажатии);
//	СтруктураОбработчиков.ОбработчикИзменения = Глоб.ПолучитьФункциюМодуля(КнопкаИзменить_ПриНажатии);
//	СтруктураОбработчиков.ОбработчикУдалить   = Глоб.ПолучитьФункциюМодуля(КнопкаУдалитьНастройку_ПриНажатии);
	
	ВысотаТаблицы = РазмерПанели.Высота - 2*Отступ;//?(Не ВидимостьПанелиКнопок,(ВысотаКнопки + 2.5*Отступ), 2*Отступ);

//	ОбъектКнопки = ЭтаФорма["КнВызовПанели"];
//	Глоб.МодульРаботаСФормами.НастроитьКнопкуВидимостиПанели(ОбъектКнопки, РазмерПанели);
//	ОбъектКнопки.УстановитьПриНажатии(КнВызовПанели_ПриНажатии);
//	ОбъектКнопки.УстановитьПриИзмененииРазмера(КнВызовПанели_УстановитьМасштаб);
//	Глоб.МодульРаботаСоСправочниками.СоздатьКнопкиТабличныхЧастей("СписокНастроекОбмена", ЭтаФорма.Закладки.НастройкиОбмена, Истина, Истина, РазмерПанели, СтруктураОбработчиков);
	// sd_
	ЭтаФорма.ДобавитьКнопкуПанели("кнСоздать", Глоб.ИконкиКнопок["Создать"], КнопкаСоздатьНастройку_ПриНажатии);
	ЭтаФорма.ДобавитьКнопкуПанели("кнИзменить",	Глоб.ИконкиКнопок["Изменить"], КнопкаИзменить_ПриНажатии);
//	ЭтаФорма.ДобавитьКнопкуПанели("кнУдалить",	Глоб.ИконкиКнопок["Удалить"], КнопкаУдалитьНастройку_ПриНажатии);
	
	ЭтаФорма.СписокНастроекОбмена.УстановитьГраницы(Отступ, Отступ, РазмерПанели.Ширина, ВысотаТаблицы);
	
	ИзменитьВидимостьПанелиКнопок();

//	Если ВидимостьПанелиКнопок Тогда
//		Глоб.МодульРаботаСФормами.ИзменитьВидимостьПанелиКнопок(ЭтаФорма.СписокНастроекОбмена, ОбъектКнопки, Ложь);
//	КонецЕсли;
//	ОбъектКнопки.Показать(Ложь);

	Возврат 0;
КонецФункции

Функция ПолучитьСписокКнопокУправления()
	
	СписокКнопок = Неопределено;
	СписокКнопок[0] = ЭтаФорма["Создать"];
	СписокКнопок[1] = ЭтаФорма["Изменить"];
	Если РежимРедактирования Тогда
		СписокКнопок[2] = ЭтаФорма["Удалить"];
	КонецЕсли;
	
	Возврат СписокКнопок;
КонецФункции

Функция ИзменитьВидимостьПанелиКнопок()

//	Если ЭтаФорма["КнВызовПанели"] <> Неопределено Тогда
//		Глоб.МодульРаботаСФормами.ИзменитьВидимостьПанелиКнопок(ЭтаФорма.СписокНастроекОбмена, ЭтаФорма["КнВызовПанели"], ВидимостьПанелиКнопок, ПолучитьСписокКнопокУправления());
//	КонецЕсли;
	
	Если ЭтаФорма.Закладки.ТекущаяЗакладка <> Неопределено Тогда
		Если ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.НастройкиОбмена Тогда
			ЭтаФорма.ДобавитьКнопкуПанели("кнСоздать", Глоб.ИконкиКнопок["Создать"], КнопкаСоздатьНастройку_ПриНажатии);
			ЭтаФорма.ДобавитьКнопкуПанели("кнИзменить",	Глоб.ИконкиКнопок["Изменить"], КнопкаИзменить_ПриНажатии);
		Иначе
			Попытка
				ЭтаФорма.УдалитьКнопкуПанели("кнСоздать");
				ЭтаФорма.УдалитьКнопкуПанели("кнИзменить");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

//	Если СтатусКнопок = Ложь Тогда
//		ЭтаФорма.УдалитьКнопкуПанели("кнСоздать");
//		ЭтаФорма.УдалитьКнопкуПанели("кнИзменить");
////		ЭтаФорма.УдалитьКнопкуПанели("кнУдалить");
//	Иначе
//		ЭтаФорма.ДобавитьКнопкуПанели("кнСоздать", Глоб.ИконкиКнопок["Создать"], КнопкаСоздатьНастройку_ПриНажатии);
//		ЭтаФорма.ДобавитьКнопкуПанели("кнИзменить",	Глоб.ИконкиКнопок["Изменить"], КнопкаИзменить_ПриНажатии);
////		ЭтаФорма.ДобавитьКнопкуПанели("кнУдалить",	Глоб.ИконкиКнопок["Удалить"], КнопкаУдалитьНастройку_ПриНажатии);
//	КонецЕсли;
	//	ЭтаФорма.ДобавитьКнопкуПанели("кнСоздать", Глоб.ИконкиКнопок["Создать"], КнопкаСоздатьНастройку_ПриНажатии);
//	ЭтаФорма.ДобавитьКнопкуПанели("кнИзменить",	Глоб.ИконкиКнопок["Изменить"], КнопкаИзменить_ПриНажатии);
//	ЭтаФорма.ДобавитьКнопкуПанели("кнУдалить",	Глоб.ИконкиКнопок["Удалить"], КнопкаУдалитьНастройку_ПриНажатии);
//	ЭтаФорма.УстановитьСтатусКнопки("кнСоздать", СтатусКнопок);
//	ЭтаФорма.УстановитьСтатусКнопки("кнИзменить", СтатусКнопок);
	
	Возврат 0;
КонецФункции

// Функция скрывает кнопки управления списками документов
//
Функция СкрытьКнопкиУправления()

	Если РежимРедактирования Тогда
		СписокСтрокИзменения = Неопределено;
		ИзменитьРежимРедактированияСписков();
	КонецЕсли;
	
	Если ВидимостьПанелиКнопок И (Не Глоб.глТекПеременныеКонстант.ЗакрепитьПанельКнопок) Тогда
		ВидимостьПанелиКнопок = Ложь;
		ИзменитьВидимостьПанелиКнопок();
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция НастроитьОтображениеКнопокУправления()

	Если ЭтаФорма["ИзменитьВыделенная" + "СписокНастроекОбмена"] <> Неопределено Тогда
		ЭтаФорма["ИзменитьВыделенная" + "СписокНастроекОбмена"].Показать(РежимРедактирования);
	КонецЕсли;
	Если ЭтаФорма["УдалитьСписокНастроекОбмена"] <> Неопределено Тогда
		ЭтаФорма["УдалитьСписокНастроекОбмена"].Показать(РежимРедактирования);
		ЭтаФорма["УдалитьСписокНастроекОбмена"].Выключен = СписокСтрокИзменения = Неопределено;
	КонецЕсли;	
	Если ЭтаФорма["СоздатьСписокНастроекОбмена"] <> Неопределено Тогда
		ЭтаФорма["СоздатьСписокНастроекОбмена"].Показать(Не РежимРедактирования);
	КонецЕсли;
	Если ЭтаФорма["ИзменитьСписокНастроекОбмена"] <> Неопределено Тогда
		ЭтаФорма["ИзменитьСписокНастроекОбмена"].Показать(Не РежимРедактирования);
	КонецЕсли;
	
	ЭтаФорма.СписокНастроекОбмена.Колонки.Пометка.Видимость = РежимРедактирования;
	
	Если РежимРедактирования Тогда
		Если ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.НастройкиОбмена Тогда
			ЭтаФорма.ЗаменитьКнопкуПанели("кнСоздать", "кнМеню", Глоб.ИконкиКнопок["Меню"], кнМеню_ПриНажатии);
			ЭтаФорма.ЗаменитьКнопкуПанели("кнИзменить", "кнИзменить", Глоб.ИконкиЗвонков["Пропущенный"], КнопкаИзменить_ПриНажатии);
			ЭтаФорма.ДобавитьКнопкуПанели("кнУдалить",	Глоб.ИконкиКнопок["Удалить"], КнопкаУдалитьНастройку_ПриНажатии);
		КонецЕсли;
	Иначе
		Если ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.НастройкиОбмена Тогда
			ЭтаФорма.ЗаменитьКнопкуПанели("кнМеню", "кнСоздать", Глоб.ИконкиКнопок["Создать"], КнопкаСоздатьНастройку_ПриНажатии);
			ЭтаФорма.ЗаменитьКнопкуПанели("кнИзменить",	"кнИзменить", Глоб.ИконкиКнопок["Изменить"], КнопкаИзменить_ПриНажатии);
			Попытка
				ЭтаФорма.УдалитьКнопкуПанели("кнУдалить");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция кнМеню_ПриНажатии()
	
	// sd
	Возврат 0;
КонецФункции

// Функция изменяет установку режима редактирования списка документов
//
Функция ИзменитьРежимРедактированияСписков()
	
	РежимРедактирования  = Не РежимРедактирования;
	СписокСтрокИзменения = Неопределено;
	НастроитьОтображениеКнопокУправления();
	
	Возврат 0;
КонецФункции

Функция КнопкаИзменить_ПриНажатии()
	
	ИзменитьРежимРедактированияСписков();
	
	Возврат 0;
КонецФункции

// Функция изменения отображения контролов в зависимости от выбранного типа подключения
//
Функция ОбновитьОтображениеКонтролловСоединения()
	
	ТипСоединения = ЭтаФорма.ТипСоединения.ПолучитьТекущийВыбор();
	wifi = Глоб.ЧислаРавны(ТипСоединения, 0, 0);
	
	ЭтаФорма.НадписьАдресПринтера.Показать(wifi);
	ЭтаФорма.НадписьПортПринтера.Показать(wifi);
	ЭтаФорма.АдресПринтера.Показать(wifi);
	ЭтаФорма.ПортПринтера.Показать(wifi);
	
	ЭтаФорма.НадписьИмяУстройства.Показать(Не wifi);
	ЭтаФорма.ИмяУстройства.Показать(Не wifi);
	ЭтаФорма.КнопкаОбновить.Показать(Не wifi);
	
	ИзменитьПоложениеКнопкиЗагрузкиШрифтов();
	
	Возврат 0;
КонецФункции

// Функция изменения отображения контролов в зависимости от выбранного варианта печати
//
Функция ОбновитьОтображениеКонтролловВариантаПечати()

	ВариантПечати = ЭтаФорма.ВариантыПечати.ПолучитьТекущийВыбор();
	ТекстовыйВариант = Глоб.ЧислаРавны(ВариантПечати, 0, 0);

	ЭтаФорма.ПечатьЧерезТекстовыйДокумент.Показать(ТекстовыйВариант);
	ЭтаФорма.НадписьПлотностьШрифта.Показать(ТекстовыйВариант);
	ЭтаФорма.ПлотностьШрифта.Показать(ТекстовыйВариант);
	ЭтаФорма.НадписьТипПринтера.Показать(ТекстовыйВариант);
	ЭтаФорма.ТипПринтера.Показать(ТекстовыйВариант);
	ЭтаФорма.НадписьТипСоединения.Показать(ТекстовыйВариант);
	ЭтаФорма.ТипСоединения.Показать(ТекстовыйВариант);
	
	Если ТекстовыйВариант Тогда
		ОбновитьОтображениеКонтролловСоединения();
	Иначе
		ЭтаФорма.НадписьАдресПринтера.Показать(ТекстовыйВариант);
		ЭтаФорма.НадписьПортПринтера.Показать(ТекстовыйВариант);
		ЭтаФорма.АдресПринтера.Показать(ТекстовыйВариант);
		ЭтаФорма.ПортПринтера.Показать(ТекстовыйВариант);
		ЭтаФорма.НадписьИмяУстройства.Показать(ТекстовыйВариант);
		ЭтаФорма.ИмяУстройства.Показать(ТекстовыйВариант);
		ЭтаФорма.КнопкаОбновить.Показать(ТекстовыйВариант);
	КонецЕсли;
	
	ЭтаФорма.НадписьПлотностьDPI.Показать(Не ТекстовыйВариант);
	ЭтаФорма.ПлотностьDPI.Показать(Не ТекстовыйВариант);
	ЭтаФорма.ПечататьКакИзображение.Показать(Не ТекстовыйВариант);

	Возврат 0;
КонецФункции

// Функция изменяет положение контролов редактирования шрифта на форме
//
Функция ИзменитьПоложениеКонтроловНастройкиШрифта()
	
	ВысотаНадписи = Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтНадпись.Представление()];
	ВысотаКнопки  = Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтКнопка.Представление()];
	ВысотаПоля	  = Глоб.КонстантыИнтерфейса["Высота" + Перечисления.СтилиШрифта.ШрифтПоле.Представление()];
	Отступ = Глоб.КонстантыИнтерфейса["мОтступСлева"];
	Слева  = ВысотаКнопки / 2;
	Верх   = Отступ;
	ВысотаКонтрола = ?(ВысотаКнопки > ВысотаПоля, ВысотаКнопки, ВысотаПоля);
	
	ШиринаРамки  = ЭтаФорма.ПанельПрокруткиШрифт.Ширина - 6;
	ШиринаСписка = ШиринаРамки - (2*ВысотаПоля + 2*ВысотаКонтрола + 3*Слева + 2*Отступ);

	// Флаг отображения рабочего стола
//	ЭтаФорма.ПоказыватьРабочийСтол.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаКонтрола);
//	Верх = Верх + ВысотаКонтрола + Отступ;
	
	// Список выбора документа продажи по умолчанию
	Если Не Глоб.ИспользуетсяМерчендайзер Тогда
		ЭтаФорма.НадписьОсновнойДокументПродажи.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаНадписи);
		Верх = Верх + ВысотаНадписи + Отступ;
		ЭтаФорма.СписокДокументовПродажи.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаКонтрола);
		Верх = Верх + ВысотаКонтрола + Отступ;
	Иначе
		ЭтаФорма.НадписьОсновнойДокументПродажи.Видимость = Ложь;
		ЭтаФорма.СписокДокументовПродажи.Видимость = Ложь;
	КонецЕсли;
	
	// Список режимов отображения фона
	ЭтаФорма.НадписьТемаПриложения.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаНадписи);
	Верх = Верх + ВысотаНадписи + Отступ;
	
	ЭтаФорма.СписокТемПриложения.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаКонтрола);
	Верх = Верх + ВысотаКонтрола * 1.5 + Отступ;
	
	СписокНастроек = Глоб.ПолучитьСписокНастроекШрифта();
	
	Для Каждого НастройкаШрифта Из СписокНастроек Цикл
	
		ИмяШрифта = НастройкаШрифта.Имя;
		
		ЭтаФорма["Надпись" + ИмяШрифта].УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаНадписи);
		ЭтаФорма["НадписьРазмер" + ИмяШрифта].Показать(0);

		Верх = Верх + ВысотаНадписи;

		КнопкаСлева = ЭтаФорма.Ширина - Отступ * 2 - ВысотаКонтрола;
		ЭтаФорма["КнопкаМинус" + ИмяШрифта].УстановитьГраницы(КнопкаСлева, Верх, ВысотаКонтрола, ВысотаКонтрола);
		КнопкаСлева = КнопкаСлева - Отступ * 2 - Целое(ВысотаКонтрола*1.5);
		ЭтаФорма["Размер" + ИмяШрифта].УстановитьГраницы(КнопкаСлева, Верх, Целое(ВысотаКонтрола*1.5), ВысотаКонтрола);
		КнопкаСлева = КнопкаСлева - Отступ * 2 - ВысотаКонтрола;
		ЭтаФорма["КнопкаПлюс" + ИмяШрифта].УстановитьГраницы(КнопкаСлева, Верх, ВысотаКонтрола, ВысотаКонтрола);

		ШиринаСпискаШрифта = КнопкаСлева - Отступ * 3;
		ЭтаФорма["Список" + ИмяШрифта].УстановитьГраницы(Отступ, Верх, ШиринаСпискаШрифта, ВысотаКонтрола);
		
		Верх = Верх + ВысотаКонтрола + Слева;
	
	КонецЦикла;
	ШиринаКнопки = ШиринаРамки - ШиринаСписка;
	КнопкаСлева  = Отступ + ШиринаСписка;
	ЭтаФорма["ШрифтПоУмолчанию"].УстановитьГраницы(КнопкаСлева, Верх, ШиринаКнопки, 2 * ВысотаКонтрола);
	
	ШиринаКонтрола = ЭтаФорма.Ширина - Отступ * 4;

	Верх = Верх + 2 * ВысотаКонтрола + Отступ;
	
	ТекстНадписи = ЭтаФорма.НадписьРасположениеКнопок.Текст;
	ШрифтНадписи = ЭтаФорма.НадписьРасположениеКнопок.Шрифт;
	РазмерыФлага = ПолучитьРазмерТекста(ТекстНадписи, ШрифтНадписи, ШиринаКонтрола);
	ЭтаФорма.НадписьРасположениеКнопок.УстановитьГраницы(Отступ, Верх, ШиринаРамки, РазмерыФлага.Высота + Отступ);
	
	Верх = Верх + РазмерыФлага.Высота + Отступ * 4;
	ЭтаФорма.РасположениеКнопок.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаКонтрола);
	
	Верх = Верх + ВысотаНадписи + Отступ * 4;
	ЭтаФорма.ФлЗакрепитьПанельКнопок.УстановитьГраницы(Отступ, Верх, ШиринаРамки, ВысотаНадписи);
	
	Верх = Верх + ВысотаНадписи + Отступ * 4;
	
	ТекстНадписи = ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.Текст;
	ШрифтНадписи = ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.Шрифт;
	РазмерыФлага = ПолучитьРазмерТекста(ТекстНадписи, ШрифтНадписи, ШиринаКонтрола);
	ЭтаФорма.флАльтернативныйРежимОтображенияКомментариев.УстановитьГраницы(Отступ, Верх, ШиринаРамки, РазмерыФлага.Высота + Отступ);
	
	Верх = Верх + РазмерыФлага.Высота + Отступ * 4;
	
	Возврат 0;
КонецФункции

// Функция создает контролы настройки шрифтов
//
Функция СоздатьКонтролыШрифта(НастройкаШрифта, СписокШрифтов)
	
	ИмяШрифта = НастройкаШрифта.Имя;
	Для Каждого Индекс, ШрифтСписка Из СписокШрифтов Цикл
		ЭтаФорма["Список" + ИмяШрифта].ДобавитьЭлемент(Индекс, ШрифтСписка);
	КонецЦикла;
	
	ЭтаФорма["Список" + ИмяШрифта].УстановитьВыбор(Глоб.КонстантыИнтерфейса["Стиль" + ИмяШрифта]);
	
	ЭтаФорма["Размер" + ИмяШрифта].Текст = Строка(Глоб.КонстантыИнтерфейса["Размер" + ИмяШрифта]);
	ЭтаФорма["КнопкаПлюс" + ИмяШрифта].УстановитьПриНажатии(НастройкаШрифта.ОбработчикПлюса);
	ЭтаФорма["КнопкаМинус" + ИмяШрифта].УстановитьПриНажатии(НастройкаШрифта.ОбработчикМинуса);
	НастройкиШрифтаДляПроверки["Размер" + ИмяШрифта] = Глоб.КонстантыИнтерфейса["Размер" + ИмяШрифта];
	НастройкиШрифтаДляПроверки["Стиль" + ИмяШрифта]  = Глоб.КонстантыИнтерфейса["Стиль" + ИмяШрифта];

	Возврат 0;
КонецФункции

функция МенюФормы_Main_ПриВыборе()
	
	ЭтаФорма.ЗакрытьОтмена();
	
	возврат 0;
конецФункции

функция МенюФормы_Extract_ПриВыборе()

	ЭтаФорма.ЗакрытьОК();
	
	возврат 0;
конецФункции

Процедура НастроитьМенюФормы()
	
	кнопкаОК = Новый("КнопкаПанелиМеню", Слов DictFormMenuOK);
	кнопкаОК.УстановитьПриНажатии(МенюФормы_Extract_ПриВыборе);
	
	кнопкаОтмена = Новый("КнопкаПанелиМеню", Слов DictFormMenuClose);
	кнопкаОтмена.УстановитьПриНажатии(МенюФормы_Main_ПриВыборе);

	ЭтаФорма.Меню = Новый("МенюФормы");
	ЭтаФорма.Меню.ДобавитьКнопку("ОК", кнопкаОК);
	ЭтаФорма.Меню.ДобавитьКнопку("Отмена", кнопкаОтмена);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////
//									Функции работы формы									  //
////////////////////////////////////////////////////////////////////////////////////////////////

Функция Форма_ПриИнициализации()

	ИзменитьПоложениеКонтролов();
	Глоб.МодульРаботаСФормами.ЗаполнитьКолонкиСписка(ЭтаФорма, ПолучитьСписокКолонокТаблицы(), "ФормаКонстант", "СписокНастроекОбмена");
	
	ЭтаФорма.СписокНастроекОбмена.УстановитьПриКасанииСтроки(СписокНастроекОбмена_ПриКасанииСтроки);
	ЭтаФорма.СписокНастроекОбмена.УстановитьПриИзмененииВысотыЯчеек(СписокНастроекОбмена_УстановитьПриИзмененииВысотыЯчеек);
	ЭтаФорма.СписокНастроекОбмена.УстановитьПриУдержании(СписокНастроекОбмена_ПриУдержании);
	
	Глоб.МодульРаботаСФормами.УстановитьРазмерыКолонок(ЭтаФорма.СписокНастроекОбмена, ПолучитьСписокКолонокТаблицы(), "ФормаКонстант_Товары", Глоб.ПолучитьОриентациюЭкранаСтрока(ЭтаФорма));
	Глоб.ИзменитьСтильЗакладок(ЭтаФорма.Закладки);
		
	НастроитьМенюФормы();
	ЗаполнитьОсновныеНастройки();
	ЗаполнитьСписокЗакладокЖурнала();
	ЗаполнитьНастройкиГПС();
	
	ЗаполнитьНастройкиККТ();
	ЗаполнитьНастройкиПечати();
	ЗаполнитьНастройкиСканирования();
	ЗаполнитьНастройкиШрифта();
	
	УстановитьВидимостьКонтроловТрека();
	ОбновитьОтображениеКонтролловСоединения();
	ОбновитьОтображениеКонтролловВариантаПечати();
	ИзменитьДоступностьЭлементовККТ();
	ИзменитьДоступностьЭлементовПечати();
	ИзменитьДоступностьЭлементовСканирования();
	
	ЭтаФорма.ККТСтатус.Текст = "";
	ЭтаФорма.ККТСигнал.Текст = "";
	УстановитьНеактивностьКнопокККТ(Не Глоб.ККТПодключено);
	
	ИзменитьТипСортировки();
	Глоб.УстановитьРазмерШрифтаЭлементовФормы(ЭтаФорма);
	
	ЭтаФорма.КнопкаВверх.Картинка = ИконкиКалькулятор["Вверх"];
	ЭтаФорма.КнопкаВниз.Картинка  = ИконкиКалькулятор["Вниз"];
	ОбновитьСписокНастроек();
	
	Если Параметры["БлокироватьФорму"] Тогда
		УстановитьДоступностьЭлементов(Истина);
		ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.НастройкаШрифта;
	КонецЕсли;
	
	Если Параметры["ОткрытьПечать"] Тогда
		ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.Печать;
	КонецЕсли;

	Если Не Глоб.Подсистемы["ККТ"] Тогда
		ЭтаФорма.Закладки.ККТ.Показать(0);
	ИначеЕсли Параметры["НастройкаККТ"] Тогда
		ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.ККТ;
	КонецЕсли;
	
	Если Не Глоб.Подсистемы["Печать"] Тогда
		ЭтаФорма.Закладки.Печать.Показать(0);
	КонецЕсли;

	ЭтаФорма.Закладки.УстановитьПриСменеЗакладки(УстанавливаемыйЗакладки_ПриСменеТекущейЗакладки);

	Возврат 0;
конецФункции

Функция УстановитьДоступностьЭлементов(ЗначениеДоступности)
	
	СписокЗакладок = Неопределено;
	СписокЗакладок[0] = "Основные";
	СписокЗакладок[1] = "НастройкиОбмена";
	СписокЗакладок[2] = "ЖурналДокументов";
	СписокЗакладок[3] = "GPS";
	СписокЗакладок[4] = "ККТ";
	СписокЗакладок[5] = "Печать";
	СписокЗакладок[6] = "Сканирование";

	Для Каждого ИмяЗакладки, Закладка Из СписокЗакладок Цикл
		ЭтаФорма.Закладки[Закладка].Выключен = ЗначениеДоступности;
	КонецЦикла;
	
	Если Не ЗначениеДоступности Тогда
		УстановитьВидимостьКонтроловТрека();
		ИзменитьДоступностьЭлементовПечати();
		ИзменитьДоступностьЭлементовСканирования();
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция проверяет наличие фоновых действий перед запуском следующего действия
//
Функция ЕстьТекущиеДействия()
	
	Если ПоискBluetoothУстройств Тогда
		Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogFormsBluetoothFind);
		Возврат Истина;
	КонецЕсли;
	Если ЗагрузкаШрифтовВПринтер Тогда
		Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogForms1);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ПолучитьЗначениеИзКонтрола(ИмяКонтролаФормы)
	
	ЗначениеКонтрола = Неопределено;
	КонтролФормы = ЭтаФорма[ИмяКонтролаФормы];
	Если ТипЗнч(КонтролФормы) = Тип("ПолеВвода") Тогда
		ЗначениеКонтрола = КонтролФормы.Текст;
	ИначеЕсли ТипЗнч(КонтролФормы) = Тип("Флажок") Тогда
		ЗначениеКонтрола = КонтролФормы.Отмечен;
	ИначеЕсли ТипЗнч(КонтролФормы) = Тип("ПолеВыбора") Тогда
		ЗначениеКонтрола = СтруктураНастроек[ИмяКонтролаФормы];
	ИначеЕсли ТипЗнч(КонтролФормы) = Тип("ВыпадающийСписок") Тогда
		ЗначениеКонтрола = КонтролФормы.ПолучитьТекущийВыбор();
	КонецЕсли;
	
	Возврат ЗначениеКонтрола;
КонецФункции

Функция ПроверитьИзменениеНастроек()
	
	ЕстьИзмененияВНастройках = Ложь;
	Для Каждого КлючНастройки, СтруктураНастроекСтрока Из СписокВидовНастроек Цикл
		Для Каждого КлючСтруктуры, ЗначениеСтруктуры Из СтруктураНастроекСтрока Цикл
			Если КлючСтруктуры = ИмяКлючаНаличияИзменения
					Или КлючСтруктуры = "РасположениеКнопок"
					Или КлючСтруктуры = "ИмяСканера"
					Или КлючСтруктуры = "ТипПринтера"
					Или КлючСтруктуры = "Кодировка"
					Или КлючСтруктуры = "ТипСоединения"
					Или КлючСтруктуры = "ИмяУстройства" Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеКонтрола = ПолучитьЗначениеИзКонтрола(КлючСтруктуры);
			Если ЗначениеКонтрола <> ЗначениеСтруктуры Тогда
				СписокВидовНастроек[КлючНастройки][ИмяКлючаНаличияИзменения] = Истина;
				ЕстьИзмененияВНастройках = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СтруктураНастроек.ОсновнаяОрганизация <> Константы.ОсновнаяОрганизация.Получить() Тогда
		ЕстьИзмененияВНастройках = Истина;
	КонецЕсли;
	
	ТекущееРасположениеКнопокБара = Перечисления.ГоризонтальноеРасположение[ЭтаФорма.РасположениеКнопок.ПолучитьТекущийВыбор()];
	Если Константы.РасположениеКнопокПанели.Получить() <> ТекущееРасположениеКнопокБара Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиШрифта"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	НомерЭлемента = ЭтаФорма.ИмяСканера.ПолучитьТекущийВыбор();
	Если Глоб.ЧислаРавны(НомерЭлемента, -1, 0) Тогда
		ИмяУстройства = "";
	Иначе
		ИмяУстройства = ЭтаФорма.ИмяСканера.ПолучитьТекстЭлемента(НомерЭлемента);
	КонецЕсли;
	Если ИмяУстройства <> Константы.ИмяСканера.Получить() Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиСканирования"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	ТипПринтера = ЭтаФорма.ТипПринтера.ПолучитьТекущийВыбор();
	ТипПринтера = СтруктураБыстрогоВыбора["ТипыПринтеров"][ТипПринтера].Представление();
	Если ТипПринтера <> Константы.ТипПринтера.Получить() Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиПечати"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	Кодировка = ЭтаФорма.Кодировка.ПолучитьТекущийВыбор();
	Кодировка = СтруктураБыстрогоВыбора["Кодировки"][Кодировка];
	Если Кодировка <> Константы.Кодировка.Получить() Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиПечати"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	ТипСоединения = ЭтаФорма.ТипСоединения.ПолучитьТекущийВыбор() + 1;
	Если ТипСоединения <> Константы.ТипСоединения.Получить() Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиПечати"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	НомерЭлемента = ЭтаФорма.ИмяУстройства.ПолучитьТекущийВыбор();
	Если Глоб.ЧислаРавны(НомерЭлемента, -1, 0) Тогда
		ИмяУстройства = "";
	Иначе
		ИмяУстройства = ЭтаФорма.ИмяУстройства.ПолучитьТекстЭлемента(НомерЭлемента);
	КонецЕсли;
	ИмяУстройстваКонстанта = Константы.ИмяУстройства.Получить();
	ИмяУстройстваКонстанта = ?(ИмяУстройстваКонстанта = Неопределено, "", ИмяУстройстваКонстанта);
	Если ИмяУстройства <> ИмяУстройстваКонстанта Тогда
		ЕстьИзмененияВНастройках = Истина;
		СписокВидовНастроек["НастройкиПечати"][ИмяКлючаНаличияИзменения] = Истина;
	КонецЕсли;
	
	ЕстьИзмененияВНастройках = ЕстьИзмененияВНастройках Или ЕстьИзмененияНастроекЖурналаДокументов();
	ЕстьИзмененияВНастройках = ЕстьИзмененияВНастройках Или ПроверитьИЗаписатьНастройкиШрифта(Ложь);
	
	Возврат ЕстьИзмененияВНастройках;
КонецФункции

функция Форма_ПриВыбореOK()
	
	Если ЕстьТекущиеДействия() Тогда
		Возврат 1;
	КонецЕсли;
	
	ЗакрыватьФорму = 0;
	ЕстьИзмененияКонстант = ПроверитьИзменениеНастроек();
	Если ЕстьИзмененияКонстант Тогда
		Если ПроверитьКонстанты() Тогда
			ДанныеЗаписаны = ЗаписатьКонстанты();
			ОповеститьОВыборе(Истина);
			ЭтаФорма.Показать(0);
		Иначе
			ЗакрыватьФорму = 1;
		КонецЕсли;
	КонецЕсли;
	
	возврат ЗакрыватьФорму;
конецФункции

функция СпособыОбмена_ПриИзмененииВыбора()
	ТекСпособОбмена = ЭтаФорма.СпособыОбмена.ПолучитьТекущийВыбор();
	возврат 0;
конецФункции

функция МенюДействий_OK_ПриНажатии()
	ЭтаФорма.ЗакрытьОК();
	возврат 0;
конецФункции

функция МенюДействий_Записать_ПриНажатии()
	ЗаписатьКонстанты();
	возврат 0;
конецФункции

функция МенюОсновное_Выход_ПриНажатии()
	ЭтаФорма.ЗакрытьОтмена();
	возврат 0;
конецФункции

Функция ТипыСортировок_ПриИзмененииВыбора()
	
	ИзменитьТипСортировки();
	
	Возврат 0;
КонецФункции

Функция Форма_ПриВыбореОтмены()
	
	Если ВидимостьПанелиКнопок И (Не Глоб.глТекПеременныеКонстант.ЗакрепитьПанельКнопок) Тогда
		
		СкрытьКнопкиУправления();
		ЗакрыватьФорму = 1;
		
	ИначеЕсли РежимРедактирования Тогда
	
		ИзменитьРежимРедактированияСписков();
		ЗакрыватьФорму = 1;
		
	Иначе
		
		Если ЕстьТекущиеДействия() Тогда
			Возврат 1;
		КонецЕсли;	
		
		ЗакрыватьФорму = 0;
		Если ЗакрытьФорму Тогда
			Возврат 0;
		КонецЕсли;
		ЕстьИзмененияКонстант = ПроверитьИзменениеНастроек();
		Если ЕстьИзмененияКонстант Тогда
			ОбъектСообщениеПользователю = Глоб.СохранитьОбъектПередЗакрытием_Новый(Слов DictCatalogsMessageBoxSaveConst, ОбработатьОтветПользователяЗакрытия);
			ЗакрыватьФорму = 1;
		Иначе
			ОповеститьОВыборе(Истина);
			ЗакрыватьФорму = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗакрыватьФорму;
КонецФункции

Функция ЗаписьТрека_ПриНажатии()
	
	УстановитьВидимостьКонтроловТрека();
	
	Возврат 0;
КонецФункции

Функция ИспользоватьGPS_ПриНажатии()
	
	Если Не ЭтаФорма.ИспользоватьGPS.Отмечен Тогда
		ЭтаФорма.ЗаписьТрека.Отмечен = Ложь;
	КонецЕсли;
	УстановитьВидимостьКонтроловТрека();
	
	Возврат 0;
КонецФункции

//Функция НастройкаФоновогоОбмена_ПриНажатии()
//	
//	МодульНастройкиОбмена = ОткрытьМодуль(ИменаМодулей.Справочники.НастройкиОбмена.ФормаСписка);
//	МодульНастройкиОбмена.ДляВыбора = Истина;
//	МодульНастройкиОбмена.УстановитьОбработкуВыбора(ОбновитьОбменФоновый);
//	МодульНастройкиОбмена.ЭтаФорма.Показать(1);
//	
//	Возврат 0;
//КонецФункции

Функция ОсновнаяОрганизация_ПриНажатии()
	
	МодульОрганизации = ОткрытьМодуль(ИменаМодулей.Справочники.Организации.ФормаСписка);
	МодульОрганизации.ДляВыбора = Истина;
	МодульОрганизации.УстановитьОбработкуВыбора(ОпределитьОрганизацию);
	МодульОрганизации.ЭтаФорма.Показать(1);
	
	Возврат 0;
КонецФункции

Функция ФлФоноваяПередача_ПриНажатии()
	
	ЭтаФорма.ИнтервалПередачи.Выключен = Не ЭтаФорма.ФлФоноваяПередача.Отмечен;
	
	Возврат 0;
КонецФункции

Функция Форма_ПриСменеОриентацииЭкрана(ориентация)

	ИзменитьПоложениеКонтролов();
	ОбновитьОтображениеКонтролловСоединения();
	ИзменитьПоложениеКонтроловНастройкиШрифта();
	Если Параметры["БлокироватьФорму"] И (Не ДоступРазрешен) Тогда
		УстановитьДоступностьЭлементов(Истина);
	КонецЕсли;
	ЭтаФорма.Закладки.УстановитьПриСменеЗакладки(УстанавливаемыйЗакладки_ПриСменеТекущейЗакладки);
	НастроитьОтображениеКнопокУправления();
	
	Возврат 0;
КонецФункции

Функция ВидимыеВкладки_ПриНажатииПоЯчейке(ключСтроки, номерСтолбца)
	
	Возврат 0;	
КонецФункции

// Функция окончания поиска доступных bluetooth устройств
//
Функция ПриОкончанииПоискаУстройств(списокУстройств)
	
	ЭтаФорма.ККТИмяУстройства.Очистить();
	ЭтаФорма.ИмяУстройства.Очистить();
	ЭтаФорма.ИмяСканера.Очистить();
	Индекс = 0;
	ТекЭлемент = 0;
	ТекСканер  = 0;
	ЭтаФорма.ИмяСканера.ДобавитьЭлемент(Слов DictCatalogsDialogFormsBuiltInCamera);
	Для Каждого Устройство Из списокУстройств Цикл
		ЭтаФорма.ККТИмяУстройства.ДобавитьЭлемент(Устройство);
		ЭтаФорма.ИмяУстройства.ДобавитьЭлемент(Устройство);
		ЭтаФорма.ИмяСканера.ДобавитьЭлемент(Устройство);
		Если Устройство = Глоб.глТекПеременныеКонстант.ИмяУстройства Тогда
			ТекЭлемент = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если Глоб.ЧислаРавны(Индекс, 0, 0) Тогда
		ЭтаФорма.ИмяУстройства.Выключен = Истина;
		Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsMessageBoxNoDevice);
	Иначе
		ЭтаФорма.ИмяУстройства.Выключен = Ложь;
		ЭтаФорма.ИмяУстройства.УстановитьВыбор(ТекЭлемент);
		ЭтаФорма.ККТСоединение.Выключен = Ложь;
	КонецЕсли;
	
	ЭтаФорма.КнопкаОбновить.Текст = Слов DictCatalogsDialogFormsRefresh;
	ЭтаФорма.ККТКнопкаОбновить.Текст = Слов DictCatalogsDialogFormsRefresh;
	ЭтаФорма.КнопкаОбновитьСканеры.Текст = Слов DictCatalogsDialogFormsRefresh;
	ЭтаФорма.НадписьИнформацияПоиска.Текст = "";
	ЭтаФорма.НадписьИнформацияПоискаСканера.Текст = "";
	ПоискBluetoothУстройств = Ложь;
	Глоб.ОпределитьСписокBluetoothУстройствВПамяти(списокУстройств);
	
	Возврат 0;
КонецФункции

// Функция запускает поиск доступных для подключения Bluetooth девайсов
//
Функция ВыполнитьПоискДоступныхУстройств()
	
	Если ПоискBluetoothУстройств Тогда
		BluetoothМенеджер.ЗакончитьПоискУстройств();
		ЭтаФорма.КнопкаОбновить.Текст = Слов DictCatalogsDialogFormsRefresh;
		ЭтаФорма.ККТКнопкаОбновить.Текст = Слов DictCatalogsDialogFormsRefresh;
		ЭтаФорма.КнопкаОбновитьСканеры.Текст = Слов DictCatalogsDialogFormsRefresh;
		ЭтаФорма.НадписьИнформацияПоиска.Текст = "";
		ЭтаФорма.НадписьИнформацияПоискаСканера.Текст = "";
		ПоискBluetoothУстройств = Ложь;
	Иначе
		
		Если ЕстьТекущиеДействия() Тогда
			Возврат 0;
		КонецЕсли;
		
		BluetoothМенеджер.УстановитьПриОкончанииПоискаУстройств(ПриОкончанииПоискаУстройств);
		Если BluetoothМенеджер.Включен() = Ложь Тогда
			BluetoothМенеджер.Включить();
		КонецЕсли;
		
		BluetoothМенеджер.НачатьПоискУстройств();
		ЭтаФорма.КнопкаОбновить.Текст = Слов DictCatalogsDialogFormsStop;
		ЭтаФорма.ККТКнопкаОбновить.Текст = Слов DictCatalogsDialogFormsStop;
		ЭтаФорма.КнопкаОбновитьСканеры.Текст = Слов DictCatalogsDialogFormsStop;
		ЭтаФорма.НадписьИнформацияПоиска.Текст = Слов DictCatalogsDialogFormsBluetoothFind;
		ЭтаФорма.НадписьИнформацияПоискаСканера.Текст = Слов DictCatalogsDialogFormsBluetoothFind;
		ПоискBluetoothУстройств = Истина;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция обновляет список доступных bluetooth устройств
// Срабатывает по нажатию кнопки Обновить на странице Сканирование
Функция КнопкаОбновитьСканеры_ПриНажатии()
	
	ВыполнитьПоискДоступныхУстройств();
	
	Возврат 0;
КонецФункции

// Функция обновляет список доступных bluetooth устройств
// Срабатывает по нажатию кнопки Обновить на странице печать
Функция КнопкаОбновить_ПриНажатии()
	
	ВыполнитьПоискДоступныхУстройств();
	
	Возврат 0;
КонецФункции

// Функция обработки изменения импа подключения
//
Функция ТипСоединения_ПриИзмененииВыбора()
	
	ОбновитьОтображениеКонтролловСоединения();
	
	Возврат 0;
КонецФункции

// Изменение состояния флажка использовать печать
//
Функция ИспользоватьПечать_ПриНажатии()
	
	ИзменитьДоступностьЭлементовПечати();
	
	Возврат 0;
КонецФункции

// Изменение состояния флажка использовать сканирование
//
Функция ИспользоватьСканирование_ПриНажатии()
	
	ИзменитьДоступностьЭлементовСканирования();
	
	Возврат 0;
КонецФункции

Функция ЗакрытьМодульНастройки(МодульНастройки, Результат)

	МодульНастройки.ВыгрузитьМодуль();

	Возврат 0;
КонецФункции

Функция ШрифтПоУмолчанию_ПриНажатии()
	
	СписокШрифтов = Глоб.ПолучитьСписокНастроекШрифта();
	Для Каждого ШрифтСписка Из СписокШрифтов Цикл
		ЭтаФорма["Размер" + ШрифтСписка.Имя].Текст = Строка(ШрифтСписка.Размер);
		ЭтаФорма["Список" + ШрифтСписка.Имя].УстановитьВыбор(0);
	КонецЦикла;
	
	Возврат 0;
КонецФункции

// Функция изменяет положение строки в списке закладок
//
Функция ИзменитьПоложениеКолонки(ИндексИзменения)
	
	Если ЭтаФорма.ВидимыеВкладки.ТекущаяСтрока <> Неопределено Тогда
		ИндексТекущий 	= ЭтаФорма.ВидимыеВкладки.ТекущаяСтрока;
		ИндексНовый		= ИндексТекущий + ИндексИзменения;
		Если ИндексНовый < 0 Или ИндексНовый > Глоб.ПолучитьКоличествоЭлементов(СписокЗакладокДляТаблицы)-1 Тогда
			Возврат 0;
		КонецЕсли;
		ТекущийЭлемент	= СписокЗакладокДляТаблицы[ИндексТекущий];
		НовыйЭлемент	= СписокЗакладокДляТаблицы[ИндексНовый];
		СписокЗакладокДляТаблицы[ИндексТекущий] = НовыйЭлемент;
		СписокЗакладокДляТаблицы[ИндексНовый]	= ТекущийЭлемент;
		ОбновитьДанныеСпискаВкладок();
		ЭтаФорма.ВидимыеВкладки.ТекущаяСтрока = ИндексНовый;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция КнопкаВниз_ПриНажатии()
	
	ИзменитьПоложениеКолонки(1);
	
	Возврат 0;
КонецФункции

Функция КнопкаВверх_ПриНажатии()
	
	ИзменитьПоложениеКолонки(-1);
	
	Возврат 0;
КонецФункции

Функция КнопкаВосстановить_ПриНажатии()
	
	ЗаполнитьСписокЗакладокЖурнала();
	
	Возврат 0;
КонецФункции

Функция ТипПринтера_ПриИзмененииВыбора()
	
	ВизимостьЗагрузкиШрифтов = (СтруктураБыстрогоВыбора["ТипыПринтеров"][ЭтаФорма.ТипПринтера.ПолучитьТекущийВыбор()] = Перечисления.ТипыПринтеров.HPPCL);
	ЭтаФорма.КнопкаЗагрузитьШрифт.Показать(ВизимостьЗагрузкиШрифтов);
	ЭтаФорма.НадписьПодсказка.Показать(ВизимостьЗагрузкиШрифтов);
	
	Возврат 0;
КонецФункции

Функция КнопкаЗагрузитьШрифт_ПриНажатии()
	
	Перем ПараметрыСоединения;
	
	Если ЕстьТекущиеДействия() Тогда
		Возврат 0;
	КонецЕсли;
	
	ФайлШрифта = АПСКлиент.ПолучитьКаталогОбменаПоУмолчанию() + "CRR00CPO.SFS";
	Если Не ФС.ФайлСуществует(ФайлШрифта) Тогда
		
		Если Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена <> Неопределено Тогда
			ФайлШрифта = Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена.КаталогОбмена + "/CRR00CPO.SFS";
			Если Не ФС.ФайлСуществует(ФайлШрифта) Тогда
				Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogFormsNoFontFile);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСоединения.ТипСоединения = ЭтаФорма.ТипСоединения.ПолучитьТекущийВыбор() + 1;
	Если Глоб.ЧислаРавны(ПараметрыСоединения.ТипСоединения, 1, 0) Тогда
		ПараметрыСоединения.Адрес = ЭтаФорма.АдресПринтера.Текст;
		ПараметрыСоединения.Порт  = Целое(ЭтаФорма.ПортПринтера.Текст);
	Иначе
		Если BluetoothМенеджер.Включен() = Ложь Тогда
			BluetoothМенеджер.Включить();
		КонецЕсли;
		НомерЭлемента = ЭтаФорма.ИмяУстройства.ПолучитьТекущийВыбор();
		ИмяУстройства = ЭтаФорма.ИмяУстройства.ПолучитьТекстЭлемента(НомерЭлемента);
		ПараметрыСоединения.ИмяУстройства = ИмяУстройства;
	КонецЕсли;
	
	Для Каждого Параметр Из ПараметрыСоединения Цикл
		Если Параметр  = "" Или Параметр = Неопределено Тогда
			Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsMessageBoxPrintNoSettings);
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	ЗагрузкаШрифтовВПринтер = Печать.ЗагрузитьШрифт(ФайлШрифта, ПараметрыСоединения, 1);
	Если ЗагрузкаШрифтовВПринтер Тогда
		ЗагрузкаШрифтовВПринтер = Истина;
		Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogPrintLoadFontStart);
	Иначе
		Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogPrintLoadFontError);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция вызывается при окончании загрузки шрифта в принтер
//
Функция ОповеститьОбОкончанииЗагрузкиШрифта()
	
	ЗагрузкаШрифтовВПринтер = Ложь;
	Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogPrintLoadFontEnd);
	
	Возврат 0;
КонецФункции

// Функция обновляет список настроек обмена
//
Функция ОбновитьСписокНастроек()

	СпрНастройки = Новый Справочники.НастройкиОбмена;
	СпрНастройки.СброситьФильтр();
	ЭтаФорма.СписокНастроекОбмена.Данные = СпрНастройки.ПолучитьСписок();

	Возврат 0;
КонецФункции

Функция ВидимыеВкладки_ПриНажатииНаСтроке(Объект, индексСтроки, индексКолонки)
	
	Если индексКолонки = 0 Тогда
		СтрокаИзменения = ЭтаФорма.ВидимыеВкладки.ТекущиеДанные;
		СтрокаИзменения.Отображать = Не СтрокаИзменения.Отображать;
		СписокЗакладокДляТаблицы[ЭтаФорма.ВидимыеВкладки.ТекущаяСтрока] = СтрокаИзменения;
		ОбновитьДанныеСпискаВкладок();
	КонецЕсли;
	
	Возврат 0;
КонецФункции

функция ОткрытьФормуНастройки(ТекНастройкаОбъект)
	
	МодульНастройки = ОткрытьМодуль(ИменаМодулей.Справочники.НастройкиОбмена.ФормаЭлемента, ТекНастройкаОбъект);
	МодульНастройки.УстановитьОбработкуВыбора(ОбновитьСписокНастроек);
	
	возврат 0;
конецфункции

Функция КнопкаСоздатьНастройку_ПриНажатии()
	
	ТекНастройкаОбъект = Неопределено;
	ОткрытьФормуНастройки(ТекНастройкаОбъект);
	
	Возврат 0;
КонецФункции

Функция УдалитьНастройкуОбмена()
	
	Если СписокСтрокИзменения <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокСтрокИзменения Цикл
			Если ЭлементСписка <> Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена Тогда
				ЭлементСписка.Удалить();
			Иначе
				Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsExchSettingsMain);
			КонецЕсли;
		КонецЦикла;
		СкрытьКнопкиУправления();
		ОбновитьСписокНастроек();
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция КнопкаУдалитьНастройку_ПриНажатии()
	
	УдалитьНастройкуОбмена();
	
	Возврат 0;
КонецФункции

// Функция обновляет константу основной настройки обмена в 
// соответствии с выбранной настройкой
Функция УстановитьОсновнуюНастройку()
	
	ОбъектНастройка = ЭтаФорма.СписокНастроекОбмена.ТекущиеДанные;
	Если ОбъектНастройка <> Неопределено Тогда
		Если Константы.ОсновнаяНастройкаОбмена.Получить() <> Строка(ОбъектНастройка.ПолучитьИдентификатор()) Тогда
			Константы.ОсновнаяНастройкаОбмена.Установить(Строка(ОбъектНастройка.ПолучитьИдентификатор()));
			Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена = ОбъектНастройка;
			ОбновитьСписокНастроек();
			Глоб.СохранитьНастройкуОбмена(ОбъектНастройка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Функция сохраняет настройки табличного поля
// 
Функция СохранитьНастройкиТабличногоПоля()

	ОриентацияЭкрана = Глоб.ПолучитьОриентациюЭкранаНовая(ЭтаФорма);
	Глоб.МодульРаботаСФормами.СохранитьНастройкиТабличногоПоля(ЭтаФорма.СписокНастроекОбмена, "ФормаКонстант_Товары_" + ОриентацияЭкрана.Представление());

	Возврат 0;
КонецФункции

Функция СписокНастроекОбмена_УстановитьПриИзмененииВысотыЯчеек()
	
	СохранитьНастройкиТабличногоПоля();
	
	Возврат 0;
КонецФункции

Функция СписокНастроекОбмена_ПриКасанииСтроки(ключСтроки, номерСтолбца)
	
	Если РежимРедактирования Тогда
		
		Если ЭтаФорма.СписокНастроекОбмена.ТекущиеДанные = Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена Тогда
			
			Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsDialogNoDelExchSet);
			
		Иначе
		
			СтруктураЭлемента = Неопределено;
			СтруктураЭлемента["СпрТип"] 	= "НастройкиОбмена";
			СтруктураЭлемента["СпрЭлемент"] = ЭтаФорма.СписокНастроекОбмена.ТекущиеДанные;
			
			Глоб.МодульРаботаСоСправочниками.ДобавитьУдалитьСтрокуВСписокРедактируемых(СписокСтрокИзменения, СтруктураЭлемента, Неопределено);
			ОбновитьСписокНастроек();
		
		КонецЕсли;
		
	Иначе
		
		ОбъектНастройка = ЭтаФорма.СписокНастроекОбмена.ТекущиеДанные;
		если ОбъектНастройка = неопределено тогда
			Возврат 0;
		КонецЕсли;
		ОткрытьФормуНастройки(ОбъектНастройка);
		
	КонецЕсли;
	
	возврат 0;
конецФункции

Функция СписокНастроекОбмена_ПриВыводеСтроки(Источник, ДанныеСтроки, ОформлениеСтроки, номерСтроки)
	
	Если ДанныеСтроки = Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена Тогда
		ШрифтСтроки = Глоб.КонстантыИнтерфейса["ОбъектШрифтТаблица"];
		ОформлениеСтроки.Шрифт = Новый ("Шрифт", ШрифтСтроки, ШрифтСтроки.Имя, ШрифтСтроки.Размер, Истина);
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Пометка.Иконка = Неопределено;
	Глоб.МодульРаботаСоСправочниками.ВывестиФлажокСтроки(ДанныеСтроки, "НастройкиОбмена", ОформлениеСтроки, СписокСтрокИзменения);
	
	Возврат 0;
КонецФункции

Функция ПрименитьОсновнуюНастройкуОбмена(Результат)
	
	ОбъектВопрос = Неопределено;
	Если Глоб.ЧислаРавны(Результат, 1, 0) Тогда
		УстановитьОсновнуюНастройку();
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция СписокНастроекОбмена_ПриУдержании()
	
	ТекущаяНастройка = ЭтаФорма.СписокНастроекОбмена.ТекущиеДанные;
	Если ТекущаяНастройка <> Неопределено И ТекущаяНастройка <> Глоб.глТекПеременныеКонстант.ОсновнаяНастройкаОбмена Тогда
		ОбъектВопрос = Глоб.ЗадатьВопросПользователю_Новый(Слов DictCatalogsDialogFormsUseExchSett, ПрименитьОсновнуюНастройкуОбмена);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция МенюДействий_Основная_ПриНажатии(параметр)
	
	УстановитьОсновнуюНастройку();
	
	Возврат 0;
КонецФункции

Функция ПроверитьПарольНастроек(МодульПароля, Результат)
	
	МодульПароля.ВыгрузитьМодуль();
	Если Результат <> Ложь Тогда
		
		ПарольНастроек = Константы.ПарольДоступаКНастройкам.Получить();
		
		Если ПарольНастроек = Результат Тогда
			УстановитьДоступностьЭлементов(Ложь);
			ДоступРазрешен = Истина;
			ПарольЗапрошен = Истина;
		Иначе
			Глоб.ВывестиВсплывающееСообщение(Слов DictCatalogsMessageBoxErrorPassSett);
			ЗапросПароляКНастройкам();
		КонецЕсли;
	Иначе
		ЭтаФорма.Закладки.ТекущаяЗакладка = ЭтаФорма.Закладки.НастройкаШрифта;
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция ЗапросПароляКНастройкам()
	
	ПарольНастроек = Константы.ПарольДоступаКНастройкам.Получить();
	
	Если ПарольНастроек <> "" И ПарольНастроек <> Неопределено Тогда
		МодульВводаЗначения = ОткрытьМодуль(ИменаМодулей.ГлобальныеМодули.ВводЗначения);
		МодульВводаЗначения.УстановитьОбработкуВыбора(ПроверитьПарольНастроек);
		МодульВводаЗначения.СоздатьФормуВводаЗначения(Слов DictConstSettPassShot, "Пароль", Ложь);
	КонецЕсли;
	
	возврат 0;
конецФункции

Функция УстанавливаемыйЗакладки_ПриСменеТекущейЗакладки(стараяЗакладка)
	
	Если ЭтаФорма.Закладки.ТекущаяЗакладка <> ЭтаФорма.Закладки.НастройкаШрифта Тогда
		Если Параметры["БлокироватьФорму"] И (Не ПарольЗапрошен) Тогда
			ЗапросПароляКНастройкам();
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиКнопок(); // sd_
	
	Возврат 0;
КонецФункции

Функция Форма_ПриПоказе()

	ЭтаФорма.УстановитьРежимОтображенияФона(Глоб.глТекПеременныеКонстант.ТемаПриложения);
	ЭтаФорма.СписокТемПриложения.УстановитьПриИзмененииВыбора(СписокТемПриложения_ПриИзмененииВыбора);
	ЭтаФорма.Закладки.ККТ.Видимость = Глоб.глТекПеременныеКонстант.ТорговляСКолес;
	ЭтаФорма.ПоказатьИконку(Ложь);

	Если Глоб.ИспользуетсяМерчендайзер Тогда
		ЭтаФорма.Закладки.ККТ.Показать(0);
		ЭтаФорма.Закладки.Печать.Показать(0);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция Закладки_ПриСменеТекущейЗакладки(стараяЗакладка)
	
	Возврат 0;
КонецФункции

Функция ККТТипСоединения_ПриИзмененииВыбора()

	ТипСоединения = ЭтаФорма.ККТТипСоединения.ПолучитьТекущийВыбор();
	Глоб.глТекПеременныеКонстант.ТипСоединенияККТ = ТипСоединения;
	ИзменитьПоложениеКонтроловККТ();

	Возврат 0;
КонецФункции

Функция ИспользоватьККТ_ПриНажатии()

	Если Не ЭтаФорма.ИспользоватьККТ.Отмечен Тогда
		Если Глоб.ККТПодключено Тогда
			Глоб.ОбъектККМ.Отключить();
			Глоб.ККТПодключено = Ложь;
		КонецЕсли;
		ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен = Ложь;
		ЭтаФорма.ККТАвтоподключение.Отмечен = Ложь;
		ЭтаФорма.ККТИспользоватьРасчетыККТ.Отмечен = Ложь;
	КонецЕсли;
	ИзменитьДоступностьЭлементовККТ();

	Возврат 0;
КонецФункции

Функция ККТКнопкаОбновить_ПриНажатии()

	ВыполнитьПоискДоступныхУстройств();
	
	Возврат 0;
КонецФункции

Функция ККТСоединение_ПриНажатии()

	Если ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTConnect Тогда

		ЭтаФорма.СтатусККТ.Текст = "";
		
		Если ПустаяСтрока(Глоб.глТекПеременныеКонстант.ОрганизацияККТ) Тогда
			ЭтаФорма.СтатусККТ.Текст = Слов DictConstKKT_OrganizationNoSelect;
			Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKT_OrganizationNoSelect);
			Возврат 0;
		КонецЕсли;
		
		ДрайверККТ = "";
		МодельККТ = ЭтаФорма.ККТСписокМоделей.ПолучитьТекущийВыбор();
	
		Индекс = 0;
		СписокМоделейККТ = Перечисления.МоделиККТ.ПолучитьСписок();
		Для Каждого Элемент Из СписокМоделейККТ Цикл
			Если Индекс = МодельККТ Тогда
				ДрайверККТ = Элемент.Имя();
				Прервать;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ДрайверККТ) Тогда
			Глоб.ОбъектККМ = ФискальныйРегистратор.ПолучитьДрайвер(ДрайверККТ);
		КонецЕсли;

		Глоб.ОбъектККМ.УстановитьКодировку = "MSDOS866";
		
		ИндексСоединения = ЭтаФорма.ККТТипСоединения.ПолучитьТекущийВыбор();
		Глоб.ОбъектККМ.ТипПодключения = ЭтаФорма.ККТТипСоединения.ПолучитьТекстЭлемента(ИндексСоединения);

		Если ИндексСоединения = 0 Тогда
			ИндексИмени = ЭтаФорма.ККТИмяУстройства.ПолучитьТекущийВыбор();
			Если ИндексИмени = -1 Тогда
				Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKTNoDeviceName);
				Возврат 0;
			КонецЕсли;
			Глоб.ОбъектККМ.ИмяУстройства = ЭтаФорма.ККТИмяУстройства.ПолучитьТекстЭлемента(ИндексИмени);
		ИначеЕсли ИндексСоединения = 1 Тогда
			Глоб.ОбъектККМ.Адрес = ЭтаФорма.ККТАдресККМ.Текст;
			Глоб.ОбъектККМ.Порт = Целое(ЭтаФорма.ККТПортККМ.Текст);
		КонецЕсли;
		
		ЭтаФорма.ККТПарольАдминистратора.СкрытьКлавиатуру();
			
		Глоб.ОбъектККМ.ПарольАвторизацииОпераций = Число(ЭтаФорма.ККТПарольПользователя.Текст);
		Глоб.ОбъектККМ.ПарольАдминистратора = Число(ЭтаФорма.ККТПарольАдминистратора.Текст);
		Глоб.ОбъектККМ.УстановитьОбработчикСостояния(ОбработчикСостоянияККТ);
		Результат = Глоб.ОбъектККМ.Подключить();
		Если Результат Тогда
			ЗаполнитьШиринуЛентККТ();
			Глоб.ККТПодключено = Истина;
			ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTDisconnect;
			Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKTConnectSuccess);
			ККТУстановитьШирину_ПриНажатии();
			Глоб.ОбъектККМ.Статус();
			УстановитьНеактивностьКнопокККТ(Ложь);
		Иначе
			Глоб.ККТПодключено = Ложь;
			Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKTConnectError);
		КонецЕсли;
		
	ИначеЕсли ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTDisconnect Тогда
	
		Глоб.ККТПодключено = Ложь;
		ЭтаФорма.СтатусККТ.Текст = "";
		Результат = Глоб.ОбъектККМ.Отключить();
		ЭтаФорма.ККТСоединение.Текст = Слов DictConstKKTConnect;
		Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKTDisconnectSuccess);
		УстановитьНеактивностьКнопокККТ(Истина);
		Глоб.СтатусСменыККТ = Неопределено;
	
	КонецЕсли;
		
	Возврат 0;
КонецФункции

Процедура ОбработчикСостоянияККТ(Статус)

//	Глоб.Отладка("Статус[КодОтвета] = "+Строка(Статус["КодОтвета"])+"; Статус[Описание] = "+Строка(Статус["Описание"]));

	Если (Статус["КодОтвета"] <> 0) И (Статус["КодОтвета"] <> 499) Тогда
		ЭтаФорма.СтатусККТ.Текст = ЭтаФорма.СтатусККТ.Текст + Статус["Описание"] + Символы.ПС;
		Если Статус["КодОтвета"] = 504 Тогда
			ТекущаяШирина = Глоб.ОбъектККМ.ПолучитьШиринуЛенты();
			Для Каждого Индекс, Элемент Из МассивШиринаЛенты Цикл
				Если ТекущаяШирина = Элемент Тогда
					ЭтаФорма.ККТСписокШиринаЛенты.УстановитьВыбор(Индекс);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Статус["КодОтвета"] = 137 Тогда // Открыт чек продажи - операция невозможна
			Если Глоб.ОбъектККМ.ПолучитьСтатусЧека() <> 0 Тогда
				Сообщение = Слов DictConstKKTPostError;
				ПредставлениеЧека = Глоб.ВернутьПредставлениеЧека(Глоб.ПоследнийЧекККТ);
				Сообщение = ЗаменитьПодстроку(Сообщение, "%ПРЕДСТАВЛЕНИЕДОКУМЕНТА%", ПредставлениеЧека);
				Глоб.ВывестиВсплывающееСообщение(Сообщение);
				Глоб.ОбъектККМ.ОтменитьЧек();
				Глоб.ИзменитьФлагДокументовККТ(Глоб.ПоследнийЧекККТ, Ложь);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Статус["КодОтвета"] = 499 Тогда
		Если Глоб.ОбъектККМ.ПолучитьСтатусЧека() <> 0 Тогда
			Сообщение = Слов DictConstKKTPostError;
			ПредставлениеЧека = Глоб.ВернутьПредставлениеЧека(Глоб.ПоследнийЧекККТ);
			Сообщение = ЗаменитьПодстроку(Сообщение, "%ПРЕДСТАВЛЕНИЕДОКУМЕНТА%", ПредставлениеЧека);
			Глоб.ВывестиВсплывающееСообщение(Сообщение);
			Глоб.ОбъектККМ.ОтменитьЧек();
			Глоб.ИзменитьФлагДокументовККТ(Глоб.ПоследнийЧекККТ, Ложь);
		КонецЕсли;
	ИначеЕсли Статус["КодОтвета"] = 247 Тогда
		Глоб.ОбъектККМ.Отключить();
		Глоб.МодульЖурнала.СформироватьМенюФормы();
		Если Глоб.глТекПеременныеКонстант.ПоказыватьРабочийСтол Тогда
			Глоб.МодульГлавнойФормы.СформироватьМенюФормы();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ККТСтатус_ПриНажатии()

	ЭтаФорма.СтатусККТ.Текст = "";
	Глоб.ОбъектККМ.Статус();
	
	Возврат 0;
КонецФункции

Функция ККТСигнал_ПриНажатии()

	Глоб.ОбъектККМ.Гудок();

	Возврат 0;
КонецФункции

Функция ККТСписокОрганизаций_ПриИзмененииВыбора()

	ИндексОрганизации = ЭтаФорма.ККТСписокОрганизаций.ПолучитьТекущийВыбор();
	Если ИндексОрганизации > 0 Тогда
		ОрганизацияККТ = СписокОрганизаций[ИндексОрганизации];
		Глоб.глТекПеременныеКонстант.ОрганизацияККТ = Строка(ОрганизацияККТ.ПолучитьИдентификатор());
		Константы.ОрганизацияККТ.Установить(Глоб.глТекПеременныеКонстант.ОрганизацияККТ);
	Иначе
		Глоб.глТекПеременныеКонстант.ОрганизацияККТ = "";
		Константы.ОрганизацияККТ.Установить(Глоб.глТекПеременныеКонстант.ОрганизацияККТ);
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция ККТУстановитьШирину_ПриНажатии()

	Если Глоб.ККТПодключено Тогда
		ИндексШирины = ЭтаФорма.ККТСписокШиринаЛенты.ПолучитьТекущийВыбор();
		Глоб.ОбъектККМ.УстановитьШиринуЛенты(МассивШиринаЛенты[ИндексШирины]);
		Глоб.глТекПеременныеКонстант.ШиринаЛентыККТ = ИндексШирины;
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция ККТСписокМоделей_ПриИзмененииВыбора()

	ЗаполнитьШиринуЛентККТ();
	
	Возврат 0;
КонецФункции

Функция ККТУпрощенныйРежимРаботы_ПриНажатии()

	Если ЭтаФорма.ККТУпрощенныйРежимРаботы.Отмечен Тогда
		Глоб.ВывестиВсплывающееСообщение(Слов DictConstKKTSimpleModeMessage);
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция ВариантыПечати_ПриИзмененииВыбора()

	ОбновитьОтображениеКонтролловВариантаПечати();

	Возврат 0;
КонецФункции
 
Параметры = ПолучитьПараметр();
ПарольЗапрошен = Ложь;
ДоступРазрешен = Ложь;

//СписокКодировок
СписокКодировок = Неопределено;
СписокКодировок[0] = "Cp1251";
СписокКодировок[1] = "Cp866";
СписокКодировок[2] = "UTF8";
СписокКодировок[3] = "KOI8_R";
СписокКодировок[4] = "UTF-16";
СписокКодировок[5] = "Cp866ukr";
СписокКодировок[6] = "Cp1125";

СписокПлотностей = Неопределено;
СписокПлотностей[0] = 72;
СписокПлотностей[1] = 96;
СписокПлотностей[2] = 120;
СписокПлотностей[3] = 144;
СписокПлотностей[4] = 192;
СписокПлотностей[5] = 240;
СписокПлотностей[6] = 300;

ВариантыПечати = Неопределено;
ВариантыПечати[0] = "Прямая печать";
ВариантыПечати[1] = Слов DictConstPrintExternal;

ПоискBluetoothУстройств = Ложь;
ЗагрузкаШрифтовВПринтер = Ложь;
ИконкиКалькулятор = Новый СписокИзображений("Калькулятор");
ИконкиКнопок	  = Новый СписокИзображений("ИконкиКнопок");
ИконкиМенюФормы	  = Новый СписокИзображений("ИконкиМенюФормы");
Печать.УстановитьПриОкончанииЗагрузкиШрифта(ОповеститьОбОкончанииЗагрузкиШрифта);

СтруктураБыстрогоВыбора["ТипыПринтеров"] = Перечисления.ТипыПринтеров.ПолучитьСписок();
СтруктураБыстрогоВыбора["МоделиККТ"]	 = Перечисления.МоделиККТ.ПолучитьСписок();
СтруктураБыстрогоВыбора["Кодировки"] 	 = СписокКодировок;
СтруктураБыстрогоВыбора["Плотности"]	 = СписокПлотностей;
СтруктураБыстрогоВыбора["Варианты"]		 = ВариантыПечати;
ИмяКлючаНаличияИзменения = "ЕстьИзменения";

ВидимостьПанелиКнопок = Ложь; // Глоб.глТекПеременныеКонстант.ЗакрепитьПанельКнопок;
РежимРедактирования   = Ложь;